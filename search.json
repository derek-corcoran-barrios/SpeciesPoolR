[{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 SpeciesPoolR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"speciespoolr","dir":"Articles","previous_headings":"","what":"SpeciesPoolR","title":"How to use the SpeciesPoolR package","text":"goal SpeciesPoolR package generate potential species pools summary metrics spatial way. can install package directly GitHub: can load package","code":"#install.packages(\"remotes\") remotes::install_github(\"derek-corcoran-barrios/SpeciesPoolR\") library(SpeciesPoolR)"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"rare-species-are-common-and-important","dir":"Articles","previous_headings":"Motivation for the pacakge","what":"Rare species are common and important","title":"How to use the SpeciesPoolR package","text":"ecological research, debate whether rare species outnumber common species within communities pivotal understanding biodiversity guiding conservation efforts. Numerous studies shown rare species typically dominate large ecological assemblages, although common species often exert substantial influence overall species richness patterns (Magurran Henderson 2003; Bregović, Fišer, Zagmajster 2019; Schalkwyk, Pryke, Samways 2019). complexity underscores need innovative approaches studying biodiversity, particularly since rare species challenging model using traditional Species Distribution Models (SDMs) due low occurrence rates (Boyd et al. 2022). Given limitations SDMs capturing dynamics rare species, essential develop alternative methods integrating species biodiversity assessments conservation planning. Although rare species contribute uniquely functional diversity ecosystem stability, especially specific habitats (Chapman, Tunnicliffe, Bates 2018; Säterberg et al. 2019), elusiveness ecological models presents significant challenge. question minimum number presence records required reliable SDMs crucial. Research shown 10-15 presence observations can produce nonrandom models species (Støa et al. 2019), others require higher thresholds—ranging 14 25 records depending species’ prevalence geographic range (Proosdij et al. 2016; Sampaio Cavalcante 2023). findings suggest even sparse datasets can useful, threshold varies significantly depending species traits habitat characteristics. Therefore, researchers must explore novel analytical frameworks conservation strategies better accommodate ecological importance rare species, thereby enhancing ability manage preserve biodiversity effectively (Reddin, Bothwell, Lennon 2015).","code":""},{"path":[]},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-1-reading-and-filtering-data","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Importing and Downloading Species Presences","what":"Step 1: Reading and Filtering Data","title":"How to use the SpeciesPoolR package","text":"going use functions SpeciesPoolR manually sequentially, first step read species list either CSV XLSX file. can use get_data function . function allows filter data dplyr-like style: generate dataset can used subsequently count species presences download species data seen table @ref(tab:tablespecies) Species used generate species pools","code":"f <- system.file(\"ex/Species_List.csv\", package=\"SpeciesPoolR\") filtered_data <- get_data(    file = f,    filter = quote(Kingdom == \"Plantae\" &                      Class == \"Magnoliopsida\" &                      Family == \"Fabaceae\") ) #> Rows: 200 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (8): redlist_2010, Kingdom, Phyllum, Class, Order, Family, Genus, Species #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-2-taxonomic-harmonization","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Importing and Downloading Species Presences","what":"Step 2: Taxonomic Harmonization","title":"How to use the SpeciesPoolR package","text":"Next, perform taxonomic harmonization ensure species names use recognized GBIF taxonomic backbone. can done using Clean_Taxa function: resulting data frame, harmonized species names, shown table @ref(tab:cleantable) Taxonomicallty harmonized dataset","code":"Clean_Species <- SpeciesPoolR::Clean_Taxa(filtered_data$Species) #> Joining with `by = join_by(Taxa)` #> Joining with `by = join_by(matched_name2)`"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-3-counting-species-presences","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Importing and Downloading Species Presences","what":"Step 3: Counting Species Presences","title":"How to use the SpeciesPoolR package","text":"harmonizing species names, ’s important obtain number occurrences species study area, especially plan calculate rarity. can using count_presences function. function allows filter occurrences country shapefile. example Denmark: resulting data frame species presences Denmark shown table @ref(tab:tableCountDenmark) Counts presences different species within Denmark Alternatively, can filter specific region using shapefile. example, count species presences within Aarhus commune: resulting data.frame Aarhus commune shown int table @ref(tab:tableCountAarhus) Counts presences different species within Aarhus commune Now recommended eliminate species occurrences area, done automatically workflow version: can retrieve species presences using function SpeciesPoolR::get_presences. end 1073 presences 7 species.","code":"# Assuming Clean_Species is your data frame Count_DK <- count_presences(Clean_Species, country = \"DK\") knitr::kable(Count_DK, caption = \"Counts of presences for the different species within Denmark\") shp <- system.file(\"ex/Aarhus.shp\", package=\"SpeciesPoolR\")  Count_Aarhus <- count_presences(Clean_Species, shapefile = shp) library(data.table) Count_Aarhus <- Count_Aarhus[N > 0,] Presences <- get_presences(species = Count_Aarhus$species, shapefile = shp) #> [1] \"Geometry created: POLYGON ((10.401438 56.302419, 10.048024 56.355225, 9.886316 56.019928, 10.239729 55.966657, 10.401438 56.302419))\" #> Starting species 1 #> 1 of 7 ready! 2024-08-29 09:19:53.811874 #> Starting species 2 #> 2 of 7 ready! 2024-08-29 09:19:54.231139 #> Starting species 3 #> 3 of 7 ready! 2024-08-29 09:19:55.422907 #> Starting species 4 #> 4 of 7 ready! 2024-08-29 09:19:55.864145 #> Starting species 5 #> 5 of 7 ready! 2024-08-29 09:19:56.605539 #> Starting species 6 #> 6 of 7 ready! 2024-08-29 09:19:57.042669 #> Starting species 7 #> 7 of 7 ready! 2024-08-29 09:19:57.468204"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-1-creating-buffers-around-species-presences","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Creating Spatial Buffers and Habitat Filtering","what":"Step 1 Creating Buffers Around Species Presences","title":"How to use the SpeciesPoolR package","text":"identified species presences within area interest, next step create spatial buffers around occurrences. buffers represent potential dispersal range species, helping assess areas species might establish given specified dispersal distance. create buffers, ’ll use raster file template rasterize buffers specify distance (meters) representing species’ dispersal range. example, make_buffer_rasterized function generates 500-meter buffer around occurrence point Presences dataset. function utilizes provided raster file template rasterizing buffers. resulting buffer500 data frame indicates raster cells covered buffer species. Table @ref(tab:showbuffer500) displays first 10 observations data frame, providing detailed view buffer’s overlap raster cells, listing cell corresponding species within buffer. Raster cells within 500-meter buffer species table provides detailed view buffer overlaps raster cells, listing cell corresponding species present within buffer.","code":"Raster <- system.file(\"ex/LU_Aarhus.tif\", package=\"SpeciesPoolR\")  buffer500 <- make_buffer_rasterized(Presences, file = Raster, dist = 500)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-2-habitat-filtering","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Creating Spatial Buffers and Habitat Filtering","what":"Step 2: Habitat Filtering","title":"How to use the SpeciesPoolR package","text":"creating buffers, next logical step filter areas based habitat suitability. allows focus specific land-use types habitats species likely thrive. Habitat filtering typically involves using raster data refine subset buffer areas according desired habitat criteria. achieve , ’ll use ModelAndPredictFunc, takes presence data frame (e.g., Presences) obtained get_presences function land-use raster. comprehensive function encompasses several critical steps: 1- Grouping Data Species: presence data grouped species using group_split, ensuring species modeled individually. 2- Sampling Land-Use Data: species, land-use data sampled presence points using SampleLanduse function. 3- Sampling Background Data: Background points also sampled land-use raster, providing contrast presence data. 4- Modeling Habitat Suitability: presence background data combined passed ModelSpecies function. function fits MaxEnt model predict habitat suitability across different land-use types. 5- Predicting Suitability: fitted model used predict habitat suitability species across available land-use types. resulting Habitats data frame contains continuous suitability predictions species across various land-use types. Table @ref(tab:tablespeciespred) shows first 9 observations, illustrating predicted habitat suitability scores first species land-use type. Predicted habitat suitability scores across various land-use types first species. values represent continuous predictions, indicating relative likelihood species presence land-use category.","code":"Habitats <- ModelAndPredictFunc(DF = Presences, file = Raster) #> Warning: [spatSample] fewer values returned than requested #> Warning: [spatSample] fewer values returned than requested #> Warning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one #> multinomial or binomial class has fewer than 8 observations; dangerous ground #> Warning: [spatSample] requested sample size is larger than the number of cells #> Warning: [spatSample] more non-NA cells requested than available #> Warning in lognet(xd, is.sparse, ix, jx, y, weights, offset, alpha, nobs, : one #> multinomial or binomial class has fewer than 8 observations; dangerous ground knitr::kable(Habitats[1:9,], caption = \"Predicted habitat suitability scores across various land-use types for the first species. The values represent continuous predictions, indicating the relative likelihood of species presence in each land-use category.\")"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-3-generating-habitat-suitability-thresholds","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Creating Spatial Buffers and Habitat Filtering","what":"Step 3: Generating Habitat Suitability Thresholds","title":"How to use the SpeciesPoolR package","text":"continuous predictions provide detailed picture habitat suitability, often useful classify predictions binary suitability thresholds. Thresholds can help determine areas species presence likely unlikely based habitat preferences. create_thresholds function facilitates generating thresholds based modeled land-use preferences, using 90th, 95th, 99th percentiles predicted suitability values. thresholds represent commission rates, helping define probability cutoff land-use type considered suitable species. ’s can generate thresholds species dataset: step produces data frame containing thresholds species, can used classify habitat suitability binary categories, helping identify core habitats areas higher conservation value.","code":""},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-1-generating-phylogenetic-diversity-metrics","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Generating summary biodiversity statistics","what":"Step 1 Generating Phylogenetic diversity metrics","title":"How to use the SpeciesPoolR package","text":"order generate Phylogenetic Diversity measures, first step generate phylogenetic tree species , use V.Phylomaker package function phylo.makerbased megaphylogeny vascular plants (Jin Qian 2019; Zanne et al. 2014), means can use functions species pools plants. case use generate_tree SpeciesPoolR :","code":"tree <- generate_tree(Count_Aarhus) #> [1] \"All species in sp.list are present on tree.\""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"running-the-speciespoolr-workflow","dir":"Articles","previous_headings":"","what":"Running the SpeciesPoolR Workflow","title":"How to use the SpeciesPoolR package","text":"prefer automate process run SpeciesPoolR workflow pipeline, can use run_workflow function. function sets targets workflow sequentially executes steps cleaning species data, counting species presences, performing spatial analysis. approach especially useful larger datasets want ensure reproducibility. run workflow, can use following code. ’ll use species filter , focusing Plantae kingdom, Magnoliopsida class, Fabaceae family. Additionally, ’ll focus Aarhus commune using shapefile.","code":"shp <- system.file(\"ex/Aarhus.shp\", package = \"SpeciesPoolR\") Raster <- system.file(\"ex/LU_Aarhus.tif\", package=\"SpeciesPoolR\")  run_workflow(   file_path = system.file(\"ex/Species_List.csv\", package = \"SpeciesPoolR\"),   filter = quote(Kingdom == \"Plantae\" & Class == \"Magnoliopsida\" & Family == \"Fabaceae\"),   shapefile = shp,   dist = 500,   rastertemp = Raster,   rasterLU = Raster ) #> ▶ dispatched target Raster #> ▶ dispatched target Landuses #> ● completed target Raster [3.641 seconds] #> ▶ dispatched target shp #> ● completed target shp [0 seconds] #> ▶ dispatched target file #> ● completed target file [0 seconds] #> ▶ dispatched target data #> ● completed target Landuses [3.683 seconds] #> ● completed target data [0.16 seconds] #> ▶ dispatched target Clean #> ● completed target Clean [1.334 seconds] #> ▶ dispatched branch Count_Presences_33538e94b3809372 #> ▶ dispatched branch Count_Presences_52d72a5ad405e933 #> ● completed branch Count_Presences_33538e94b3809372 [0.725 seconds] #> ▶ dispatched branch Count_Presences_e70f77d9439a4770 #> ● completed branch Count_Presences_52d72a5ad405e933 [0.801 seconds] #> ▶ dispatched branch Count_Presences_dea4ef8633a449a1 #> ● completed branch Count_Presences_e70f77d9439a4770 [0.204 seconds] #> ▶ dispatched branch Count_Presences_69210fc440d13855 #> ● completed branch Count_Presences_dea4ef8633a449a1 [0.209 seconds] #> ▶ dispatched branch Count_Presences_a61be030e01ebaf5 #> ● completed branch Count_Presences_69210fc440d13855 [0.178 seconds] #> ▶ dispatched branch Count_Presences_974105e269324d3e #> ● completed branch Count_Presences_a61be030e01ebaf5 [0.183 seconds] #> ▶ dispatched branch Count_Presences_37d1f8d5f74d852c #> ● completed branch Count_Presences_974105e269324d3e [0.178 seconds] #> ● completed branch Count_Presences_37d1f8d5f74d852c [0.183 seconds] #> ● completed pattern Count_Presences #> ▶ dispatched target More_than_zero #> ● completed target More_than_zero [0.001 seconds] #> ▶ dispatched branch Presences_c112b37cd15959d6 #> ▶ dispatched branch Presences_af64bac105a08467 #> ● completed branch Presences_af64bac105a08467 [1.371 seconds] #> ▶ dispatched branch buffer_0e19b8cb545404d2 #> ● completed branch buffer_0e19b8cb545404d2 [0.056 seconds] #> ▶ dispatched branch Presences_daf8d6353bc80f0c #> ● completed branch Presences_c112b37cd15959d6 [2.325 seconds] #> ▶ dispatched branch buffer_626a53b08dfe709d #> ● completed branch buffer_626a53b08dfe709d [0.056 seconds] #> ▶ dispatched branch Presences_310adeccf6b44725 #> ● completed branch Presences_daf8d6353bc80f0c [1.468 seconds] #> ▶ dispatched branch buffer_edb09c8ec5c9a988 #> ● completed branch Presences_310adeccf6b44725 [0.608 seconds] #> ▶ dispatched branch buffer_b226446ac3154351 #> ● completed branch buffer_edb09c8ec5c9a988 [0.163 seconds] #> ▶ dispatched branch Presences_e65f4227e8299cc4 #> ● completed branch buffer_b226446ac3154351 [0.13 seconds] #> ▶ dispatched branch Presences_d4b9dc68293bd5b2 #> ● completed branch Presences_e65f4227e8299cc4 [0.635 seconds] #> ▶ dispatched branch buffer_0a8436ee3d4f2644 #> ● completed branch Presences_d4b9dc68293bd5b2 [0.597 seconds] #> ▶ dispatched branch buffer_cae8301e59fc4e01 #> ● completed branch buffer_0a8436ee3d4f2644 [0.026 seconds] #> ▶ dispatched branch Presences_88937156c1302a12 #> ● completed branch buffer_cae8301e59fc4e01 [0.021 seconds] #> ▶ dispatched target Phylo_Tree #> ● completed branch Presences_88937156c1302a12 [0.404 seconds] #> ● completed pattern Presences #> ▶ dispatched branch buffer_a0190cbfdf5f6f1f #> ● completed branch buffer_a0190cbfdf5f6f1f [0.019 seconds] #> ● completed pattern buffer #> ▶ dispatched branch ModelAndPredict_0e19b8cb545404d2 #> ● completed branch ModelAndPredict_0e19b8cb545404d2 [0.693 seconds] #> ▶ dispatched branch ModelAndPredict_626a53b08dfe709d #> ● completed branch ModelAndPredict_626a53b08dfe709d [9.436 seconds] #> ▶ dispatched branch ModelAndPredict_edb09c8ec5c9a988 #> ● completed branch ModelAndPredict_edb09c8ec5c9a988 [10.4 seconds] #> ▶ dispatched branch ModelAndPredict_b226446ac3154351 #> ● completed target Phylo_Tree [21.878 seconds] #> ▶ dispatched branch ModelAndPredict_0a8436ee3d4f2644 #> ● completed branch ModelAndPredict_b226446ac3154351 [2.621 seconds] #> ▶ dispatched branch ModelAndPredict_cae8301e59fc4e01 #> ● completed branch ModelAndPredict_cae8301e59fc4e01 [0.43 seconds] #> ▶ dispatched branch ModelAndPredict_a0190cbfdf5f6f1f #> ● completed branch ModelAndPredict_a0190cbfdf5f6f1f [0.202 seconds] #> ● completed branch ModelAndPredict_0a8436ee3d4f2644 [6.626 seconds] #> ● completed pattern ModelAndPredict #> ▶ dispatched target Thresholds #> ● completed target Thresholds [0.292 seconds] #> ▶ ended pipeline [41.291 seconds] #> Warning message: #> 3 targets produced warnings. Run targets::tar_meta(fields = warnings, complete_only = TRUE) for the messages.  #>"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"how-it-works","dir":"Articles","previous_headings":"Running the SpeciesPoolR Workflow","what":"How It Works","title":"How to use the SpeciesPoolR package","text":"run_workflow function creates pipeline : 1- Reads data specified file path. 2- Filters data using provided filter expression. 3- Cleans species names match GBIF taxonomic backbone. 4- Counts species presences within specified geographic area (case, Aarhus). 5- Generates buffer around species presences within specified distance, template raster. 6- Predicts habitat suitability species across different land-use types using ModelAndPredictFunc, models habitat preferences provides continuous predictions. 7- Generates phyllogenetic tree species species list. 8- Generates visual representation workflow (plot = TRUE). can monitor progress workflow visualize dependencies steps using targets::tar_visnetwork(). result similar running steps manually added benefits parallel execution reproducibility. automated approach allows streamline analysis ensures steps consistently applied data. also makes easier rerun workflow different parameters datasets.","code":""},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Derek Corcoran. Author, maintainer.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Corcoran D (2024). SpeciesPoolR: Creates Species Pools Potential Habitats. R package version 0.0.0.9000, https://derek-corcoran-barrios.github.io/SpeciesPoolR/, https://github.com/derek-corcoran-barrios/SpeciesPoolR.","code":"@Manual{,   title = {SpeciesPoolR: Creates Species Pools For Potential Habitats},   author = {Derek Corcoran},   year = {2024},   note = {R package version 0.0.0.9000, https://derek-corcoran-barrios.github.io/SpeciesPoolR/},   url = {https://github.com/derek-corcoran-barrios/SpeciesPoolR}, }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_1-speciespoolr","dir":"","previous_headings":"","what":"Creates Species Pools For Potential Habitats","title":"Creates Species Pools For Potential Habitats","text":"goal SpeciesPoolR package generate potential species pools summary metrics spatial way. can install package directly GitHub: can load package","code":"#install.packages(\"remotes\") remotes::install_github(\"derek-corcoran-barrios/SpeciesPoolR\") library(SpeciesPoolR)"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_21-rare-species-are-common-and-important","dir":"","previous_headings":"","what":"2.1 Rare species are common and important","title":"Creates Species Pools For Potential Habitats","text":"ecological research, debate whether rare species outnumber common species within communities pivotal understanding biodiversity guiding conservation efforts. Numerous studies shown rare species typically dominate large ecological assemblages, although common species often exert substantial influence overall species richness patterns (Magurran Henderson 2003; Bregović, Fišer, Zagmajster 2019; Schalkwyk, Pryke, Samways 2019). complexity underscores need innovative approaches studying biodiversity, particularly since rare species challenging model using traditional Species Distribution Models (SDMs) due low occurrence rates (Boyd et al. 2022). Given limitations SDMs capturing dynamics rare species, essential develop alternative methods integrating species biodiversity assessments conservation planning. Although rare species contribute uniquely functional diversity ecosystem stability, especially specific habitats (Chapman, Tunnicliffe, Bates 2018; Säterberg et al. 2019), elusiveness ecological models presents significant challenge. question minimum number presence records required reliable SDMs crucial. Research shown 10-15 presence observations can produce nonrandom models species (Støa et al. 2019), others require higher thresholds—ranging 14 25 records depending species’ prevalence geographic range (Proosdij et al. 2016; Sampaio Cavalcante 2023). findings suggest even sparse datasets can useful, threshold varies significantly depending species traits habitat characteristics. Therefore, researchers must explore novel analytical frameworks conservation strategies better accommodate ecological importance rare species, thereby enhancing ability manage preserve biodiversity effectively (Reddin, Bothwell, Lennon 2015). highly degraded habitats, Denmark, 60% land dominated agriculture less 10% remains natural habitat, traditional SDMs may face limitations. scarcity natural habitats means presence records often skewed towards human-modified landscapes, complicating modeling species’ ecological preferences. contexts, majority occurrences may reflect species’ natural behaviors habitat use, relying complex SDMs lead misleading predictions. Instead, simpler algorithms incorporate basic dispersal mechanisms habitat filtering might effective. reducing assumptions habitat preferences, methods can provide realistic framework conservation planning, particularly dealing restoration agricultural lands natural habitats. rare species, indeed many others, approach may offer practical solution scenarios detailed ecological data sparse unreliable. Studies suggested landscapes, simplistic models prioritize dispersal broad habitat suitability intricate ecological niches can better capture species’ potential distributions responses environmental changes (GUISAN et al. 2006; Thuiller et al. 2005), example approach range bagging (Drake 2015). pragmatic approach especially pertinent planning conservation actions areas habitat degradation left little intact nature, ensures even data constraints, effective biodiversity management can still pursued.","code":""},{"path":[]},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_311-step-1-reading-and-filtering-data","dir":"","previous_headings":"3.1 Importing and Downloading Species Presences","what":"3.1.1 Step 1: Reading and Filtering Data","title":"Creates Species Pools For Potential Habitats","text":"going use functions SpeciesPoolR manually sequentially, first step read species list either CSV XLSX file. can use get_data function . function allows filter data dplyr-like style: generate dataset can used subsequently count species presences download species data seen table 3.1 Table 3.1: Species used generate species pools","code":"f <- system.file(\"ex/Species_List.csv\", package=\"SpeciesPoolR\") filtered_data <- get_data(    file = f,    filter = quote(Kingdom == \"Plantae\" &                      Class == \"Magnoliopsida\" &                      Family == \"Fabaceae\") )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_312-step-2-taxonomic-harmonization","dir":"","previous_headings":"3.1 Importing and Downloading Species Presences","what":"3.1.2 Step 2: Taxonomic Harmonization","title":"Creates Species Pools For Potential Habitats","text":"Next, perform taxonomic harmonization ensure species names use recognized GBIF taxonomic backbone. can done using Clean_Taxa function: resulting data frame, harmonized species names, shown table 3.2 Table 3.2: Taxonomicallty harmonized dataset","code":"Clean_Species <- SpeciesPoolR::Clean_Taxa(filtered_data$Species)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_313-step-3-counting-species-presences","dir":"","previous_headings":"3.1 Importing and Downloading Species Presences","what":"3.1.3 Step 3: Counting Species Presences","title":"Creates Species Pools For Potential Habitats","text":"harmonizing species names, ’s important obtain number occurrences species study area, especially plan calculate rarity. can using count_presences function. function allows filter occurrences country shapefile. example Denmark: resulting data frame species presences Denmark shown table 3.3 Table 3.3: Counts presences different species within Denmark Alternatively, can filter specific region using shapefile. example, count species presences within Aarhus commune: resulting data.frame Aarhus commune shown int table 3.4 Table 3.4: Counts presences different species within Aarhus commune Now recommended eliminate species occurrences area, done automatically workflow version: can retrieve species presences using function SpeciesPoolR::get_presences. end 1073 presences 7 species.","code":"# Assuming Clean_Species is your data frame Count_DK <- count_presences(Clean_Species, country = \"DK\") knitr::kable(Count_DK, caption = \"Counts of presences for the different species within Denmark\") shp <- system.file(\"ex/Aarhus.shp\", package=\"SpeciesPoolR\")  Count_Aarhus <- count_presences(Clean_Species, shapefile = shp) library(data.table) Count_Aarhus <- Count_Aarhus[N > 0,] Presences <- get_presences(species = Count_Aarhus$species, shapefile = shp) #> [1] \"Geometry created: POLYGON ((10.401438 56.302419, 10.048024 56.355225, 9.886316 56.019928, 10.239729 55.966657, 10.401438 56.302419))\""},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_321-step-1-creating-buffers-around-species-presences","dir":"","previous_headings":"3.2 Creating Spatial Buffers and Habitat Filtering","what":"3.2.1 Step 1 Creating Buffers Around Species Presences","title":"Creates Species Pools For Potential Habitats","text":"identified species presences within area interest, next step create spatial buffers around occurrences. buffers represent potential dispersal range species, helping assess areas species might establish given specified dispersal distance. create buffers, ’ll use raster file template rasterize buffers specify distance (meters) representing species’ dispersal range. example, make_buffer_rasterized function generates 500-meter buffer around occurrence point Presences dataset. function utilizes provided raster file template rasterizing buffers. resulting buffer500 data frame indicates raster cells covered buffer species. Table 3.5 displays first 10 observations data frame, providing detailed view buffer’s overlap raster cells, listing cell corresponding species within buffer. Table 3.5: Raster cells within 500-meter buffer species table provides detailed view buffer overlaps raster cells, listing cell corresponding species present within buffer.","code":"Raster <- system.file(\"ex/LU_Aarhus.tif\", package=\"SpeciesPoolR\")  buffer500 <- make_buffer_rasterized(Presences, file = Raster, dist = 500)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_322-step-2-habitat-filtering","dir":"","previous_headings":"3.2 Creating Spatial Buffers and Habitat Filtering","what":"3.2.2 Step 2: Habitat Filtering","title":"Creates Species Pools For Potential Habitats","text":"creating buffers, next logical step filter areas based habitat suitability. allows focus specific land-use types habitats species likely thrive. Habitat filtering typically involves using raster data refine subset buffer areas according desired habitat criteria. achieve , ’ll use ModelAndPredictFunc, takes presence data frame (e.g., Presences) obtained get_presences function land-use raster. comprehensive function encompasses several critical steps: 1- Grouping Data Species: presence data grouped species using group_split, ensuring species modeled individually. 2- Sampling Land-Use Data: species, land-use data sampled presence points using SampleLanduse function. 3- Sampling Background Data: Background points also sampled land-use raster, providing contrast presence data. 4- Modeling Habitat Suitability: presence background data combined passed ModelSpecies function. function fits MaxEnt model predict habitat suitability across different land-use types. 5- Predicting Suitability: fitted model used predict habitat suitability species across available land-use types. resulting Habitats data frame contains continuous suitability predictions species across various land-use types. Table 3.6 shows first 9 observations, illustrating predicted habitat suitability scores first species land-use type. Table 3.6: Predicted habitat suitability scores across various land-use types first species. values represent continuous predictions, indicating relative likelihood species presence land-use category.","code":"Habitats <- ModelAndPredictFunc(DF = Presences, file = Raster) knitr::kable(Habitats[1:9,], caption = \"Predicted habitat suitability scores across various land-use types for the first species. The values represent continuous predictions, indicating the relative likelihood of species presence in each land-use category.\")"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_323-step-3-generating-habitat-suitability-thresholds","dir":"","previous_headings":"3.2 Creating Spatial Buffers and Habitat Filtering","what":"3.2.3 Step 3: Generating Habitat Suitability Thresholds","title":"Creates Species Pools For Potential Habitats","text":"continuous predictions provide detailed picture habitat suitability, often useful classify predictions binary suitability thresholds. Thresholds can help determine areas species presence likely unlikely based habitat preferences. create_thresholds function facilitates generating thresholds based modeled land-use preferences, using 90th, 95th, 99th percentiles predicted suitability values. thresholds represent commission rates, helping define probability cutoff land-use type considered suitable species. ’s can generate thresholds species dataset: generate de data set threshold comission rates 90, 95 99th percentile species can seen Table 3.7. Table 3.7: Threshold based commission rate species used step produces data frame containing thresholds species, can used classify habitat suitability binary categories, helping identify core habitats areas higher conservation value.","code":"Thresholds <- create_thresholds(Model = Habitats, reference = Presences, file = Raster)"},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_331-step-1-generating-phylogenetic-diversity-metrics","dir":"","previous_headings":"3.3 Generating summary biodiversity statistics","what":"3.3.1 Step 1 Generating Phylogenetic diversity metrics","title":"Creates Species Pools For Potential Habitats","text":"order generate Phylogenetic Diversity measures, first step generate phylogenetic tree species , use V.Phylomaker package function phylo.makerbased megaphylogeny vascular plants (Jin Qian 2019; Zanne et al. 2014), means can use functions species pools plants. case use generate_tree SpeciesPoolR :","code":"tree <- generate_tree(Count_Aarhus) #> [1] \"All species in sp.list are present on tree.\""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_4-running-the-speciespoolr-workflow","dir":"","previous_headings":"","what":"4 Running the SpeciesPoolR Workflow","title":"Creates Species Pools For Potential Habitats","text":"prefer automate process run SpeciesPoolR workflow pipeline, can use run_workflow function. function sets targets workflow sequentially executes steps cleaning species data, counting species presences, performing spatial analysis. approach especially useful larger datasets want ensure reproducibility. run workflow, can use following code. ’ll use species filter , focusing Plantae kingdom, Magnoliopsida class, Fabaceae family. Additionally, ’ll focus Aarhus commune using shapefile.","code":"shp <- system.file(\"ex/Aarhus.shp\", package = \"SpeciesPoolR\") Raster <- system.file(\"ex/LU_Aarhus.tif\", package=\"SpeciesPoolR\")  run_workflow(   file_path = system.file(\"ex/Species_List.csv\", package = \"SpeciesPoolR\"),   filter = quote(Kingdom == \"Plantae\" & Class == \"Magnoliopsida\" & Family == \"Fabaceae\"),   shapefile = shp,   dist = 500,   rastertemp = Raster,   rasterLU = Raster ) #> ▶ dispatched target Raster #> ▶ dispatched target Landuses #> ● completed target Raster [7.149 seconds] #> ▶ dispatched target shp #> ● completed target Landuses [0 seconds] #> ▶ dispatched target file #> ● completed target shp [0 seconds] #> ● completed target file [0.001 seconds] #> ▶ dispatched target data #> ● completed target data [10.465 seconds] #> ▶ dispatched target Clean #> ● completed target Clean [8.179 seconds] #> ▶ dispatched branch Count_Presences_33538e94b3809372 #> ▶ dispatched branch Count_Presences_52d72a5ad405e933 #> ● completed branch Count_Presences_33538e94b3809372 [0.219 seconds] #> ▶ dispatched branch Count_Presences_e70f77d9439a4770 #> ● completed branch Count_Presences_52d72a5ad405e933 [0.344 seconds] #> ▶ dispatched branch Count_Presences_dea4ef8633a449a1 #> ● completed branch Count_Presences_e70f77d9439a4770 [0.113 seconds] #> ▶ dispatched branch Count_Presences_69210fc440d13855 #> ● completed branch Count_Presences_dea4ef8633a449a1 [0.039 seconds] #> ▶ dispatched branch Count_Presences_a61be030e01ebaf5 #> ● completed branch Count_Presences_a61be030e01ebaf5 [0.034 seconds] #> ▶ dispatched branch Count_Presences_974105e269324d3e #> ● completed branch Count_Presences_974105e269324d3e [0.042 seconds] #> ▶ dispatched branch Count_Presences_37d1f8d5f74d852c #> ● completed branch Count_Presences_69210fc440d13855 [0.173 seconds] #> ● completed branch Count_Presences_37d1f8d5f74d852c [0.043 seconds] #> ● completed pattern Count_Presences #> ▶ dispatched target More_than_zero #> ● completed target More_than_zero [0.002 seconds] #> ▶ dispatched branch Presences_c112b37cd15959d6 #> ▶ dispatched branch Presences_af64bac105a08467 #> ● completed branch Presences_af64bac105a08467 [0.517 seconds] #> ▶ dispatched branch buffer_0e19b8cb545404d2 #> ● completed branch buffer_0e19b8cb545404d2 [0.141 seconds] #> ▶ dispatched branch Presences_daf8d6353bc80f0c #> ● completed branch Presences_c112b37cd15959d6 [0.92 seconds] #> ▶ dispatched branch buffer_626a53b08dfe709d #> ● completed branch buffer_626a53b08dfe709d [0.155 seconds] #> ▶ dispatched branch Presences_310adeccf6b44725 #> ● completed branch Presences_310adeccf6b44725 [0.427 seconds] #> ▶ dispatched branch buffer_b226446ac3154351 #> ● completed branch Presences_daf8d6353bc80f0c [1.059 seconds] #> ▶ dispatched branch buffer_edb09c8ec5c9a988 #> ● completed branch buffer_b226446ac3154351 [0.322 seconds] #> ▶ dispatched branch Presences_e65f4227e8299cc4 #> ● completed branch buffer_edb09c8ec5c9a988 [0.375 seconds] #> ▶ dispatched branch Presences_d4b9dc68293bd5b2 #> ● completed branch Presences_e65f4227e8299cc4 [0.631 seconds] #> ▶ dispatched branch buffer_0a8436ee3d4f2644 #> ● completed branch buffer_0a8436ee3d4f2644 [0.046 seconds] #> ▶ dispatched branch Presences_88937156c1302a12 #> ● completed branch Presences_d4b9dc68293bd5b2 [0.483 seconds] #> ▶ dispatched branch buffer_cae8301e59fc4e01 #> ● completed branch buffer_cae8301e59fc4e01 [0.051 seconds] #> ▶ dispatched target Phylo_Tree #> ● completed branch Presences_88937156c1302a12 [0.352 seconds] #> ● completed pattern Presences #> ▶ dispatched branch buffer_a0190cbfdf5f6f1f #> ● completed branch buffer_a0190cbfdf5f6f1f [0.036 seconds] #> ● completed pattern buffer #> ▶ dispatched branch ModelAndPredict_0e19b8cb545404d2 #> ● completed branch ModelAndPredict_0e19b8cb545404d2 [1.124 seconds] #> ▶ dispatched branch ModelAndPredict_626a53b08dfe709d #> ● completed branch ModelAndPredict_626a53b08dfe709d [18.38 seconds] #> ▶ dispatched branch ModelAndPredict_b226446ac3154351 #> ● completed branch ModelAndPredict_b226446ac3154351 [4.941 seconds] #> ▶ dispatched branch ModelAndPredict_edb09c8ec5c9a988 #> ● completed target Phylo_Tree [43.023 seconds] #> ▶ dispatched branch ModelAndPredict_0a8436ee3d4f2644 #> ● completed branch ModelAndPredict_edb09c8ec5c9a988 [22.431 seconds] #> ▶ dispatched branch ModelAndPredict_cae8301e59fc4e01 #> ● completed branch ModelAndPredict_cae8301e59fc4e01 [0.837 seconds] #> ▶ dispatched branch ModelAndPredict_a0190cbfdf5f6f1f #> ● completed branch ModelAndPredict_a0190cbfdf5f6f1f [0.376 seconds] #> ● completed branch ModelAndPredict_0a8436ee3d4f2644 [11.426 seconds] #> ● completed pattern ModelAndPredict #> ▶ dispatched target Thresholds #> ● completed target Thresholds [0.514 seconds] #> ▶ ended pipeline [1.463 minutes] #> Warning message: #> 3 targets produced warnings. Run targets::tar_meta(fields = warnings, complete_only = TRUE) for the messages."},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_41-how-it-works","dir":"","previous_headings":"","what":"4.1 How It Works","title":"Creates Species Pools For Potential Habitats","text":"run_workflow function creates pipeline : 1- Reads data specified file path. 2- Filters data using provided filter expression. 3- Cleans species names match GBIF taxonomic backbone. 4- Counts species presences within specified geographic area (case, Aarhus). 5- Generates buffer around species presences within specified distance, template raster. 6- Predicts habitat suitability species across different land-use types using ModelAndPredictFunc, models habitat preferences provides continuous predictions. 7- Generates phyllogenetic tree species species list. 8- Generates visual representation workflow (plot = TRUE). can monitor progress workflow visualize dependencies steps using targets::tar_visnetwork(). result similar running steps manually added benefits parallel execution reproducibility. automated approach allows streamline analysis ensures steps consistently applied data. also makes easier rerun workflow different parameters datasets.","code":""},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean taxa using Taxize and rgbif — Clean_Taxa","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"function cleans vector taxa using Taxize rgbif","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"","code":"Clean_Taxa(Taxons, WriteFile = F, Species_Only = T)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"Taxons Vector taxa cleaned. WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results) Species_Only logical, TRUE (default) species returned, FALSE, return highest possible taxonomic resolution","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"data frame cleaned taxa scores.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"Chamberlain, Scott T., et al. \"Taxize: R package taxonomic lookup manipulation.\" Methods Ecology Evolution 6.12 (2015): 1451-1456. Chamberlain S, Barve V, Mcglinn D, Oldoni D, Desmet P, Geffert L, Ram K (2023). rgbif: Interface Global Biodiversity Information Facility API_ R package version 3.7.4","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"","code":"Cleaned <- Clean_Taxa(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` #> Joining with `by = join_by(matched_name2)`"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean taxa using Taxize — Clean_Taxa_Taxize","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"function cleans vector taxa using Taxize.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"","code":"Clean_Taxa_Taxize(Taxons, WriteFile = F)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"Taxons Vector taxa cleaned. WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results)","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"data frame cleaned taxa scores.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"Chamberlain, Scott T., et al. \"Taxize: R package taxonomic lookup manipulation.\" Methods Ecology Evolution 6.12 (2015): 1451-1456.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"","code":"Clean_Taxa_Taxize(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` #> # A tibble: 1 × 4 #>   Taxa        score matched_name2 TaxaID #>   <chr>       <dbl> <chr>          <int> #> 1 Canis lupus 0.988 Canis lupus        1"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Taxa from GBIF — Clean_Taxa_rgbif","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Clean taxonomic list using GBIF","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"","code":"Clean_Taxa_rgbif(Cleaned_Taxize, WriteFile = F, Species_Only = T)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Cleaned_Taxize data frame containing cleaned taxonomic list function Clean_Taxa_Taxize WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results) Species_Only logical, TRUE (default) species returned, FALSE, return highest possible taxonomic resolution","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"csv file containing cleaned taxonomic list","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Chamberlain S, Barve V, Mcglinn D, Oldoni D, Desmet P, Geffert L, Ram K (2023). rgbif: Interface Global Biodiversity Information Facility API_ R package version 3.7.4,","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"","code":"Cleaned_Taxize <- Clean_Taxa_Taxize(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` Clean_Taxa_rgbif(Cleaned_Taxize) #> Joining with `by = join_by(matched_name2)` #> # A tibble: 1 × 12 #> # Groups:   species [1] #>   Taxa  matched_name2 confidence canonicalName kingdom phylum class order family #>   <chr> <chr>              <int> <chr>         <chr>   <chr>  <chr> <chr> <chr>  #> 1 Cani… Canis lupus           99 Canis lupus   Animal… Chord… Mamm… Carn… Canid… #> # ℹ 3 more variables: genus <chr>, species <chr>, rank <chr>"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Convex_20.html","id":null,"dir":"Reference","previous_headings":"","what":"Convex_20 — Convex_20","title":"Convex_20 — Convex_20","text":"Creates 20% expanded convex hull set coordinates.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Convex_20.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convex_20 — Convex_20","text":"","code":"Convex_20(   DF,   lon = \"decimalLongitude\",   lat = \"decimalLatitude\",   proj = \"+proj=longlat +datum=WGS84 +no_defs\" )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Convex_20.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convex_20 — Convex_20","text":"DF dataframe containing coordinates. lon name longitude column dataframe. lat name latitude column dataframe. proj projection coordinates.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Convex_20.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convex_20 — Convex_20","text":"polygon representing expanded convex hull 20%.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Convex_20.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convex_20 — Convex_20","text":"","code":"DF <- data.frame(decimalLongitude =       c(23.978543, 23.785003, 11.485,  -2.054027, 12.9069),                  decimalLatitude =        c(38.088876, 60.238213, 48.165, 53.33939, 56.80782))  Convex_20(DF, lon = \"decimalLongitude\", lat = \"decimalLatitude\", proj = \"+proj=longlat +datum=WGS84 +no_defs\")"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Generate_Lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Lookup Table for Species Land-Use Preferences — Generate_Lookup","title":"Generate a Lookup Table for Species Land-Use Preferences — Generate_Lookup","text":"function generates lookup table indicates land-use types species predicted present, based model predictions specified thresholds.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Generate_Lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Lookup Table for Species Land-Use Preferences — Generate_Lookup","text":"","code":"Generate_Lookup(Model, Thresholds)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Generate_Lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Lookup Table for Species Land-Use Preferences — Generate_Lookup","text":"Model data frame containing model predictions, columns species, Landuse, Pred. Thresholds data frame containing thresholds presence predictions, columns species, Thres_99, Thres_95, Thres_90.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Generate_Lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Lookup Table for Species Land-Use Preferences — Generate_Lookup","text":"data frame indicates land-use types species predicted present. data frame contains columns species, Landuse, Pres.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Landuse Presences — GetLandusePresences","title":"Get Landuse Presences — GetLandusePresences","text":"function reads combines species presence data multiple files within specified folder given land use type.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Landuse Presences — GetLandusePresences","text":"","code":"GetLandusePresences(folder, Landuse)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Landuse Presences — GetLandusePresences","text":"folder character string specifying path folder containing land use data files. Landuse character string specifying land use type presence data read. function assumes files located subdirectories named land use type within specified folder.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Landuse Presences — GetLandusePresences","text":"data frame containing combined species presence data columns cell, species, Landuse.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Landuse Presences — GetLandusePresences","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   folder <- system.file(\"ex/\", package=\"SpeciesPoolR\")   list.files(folder, pattern = \".zip\")   Landuse <- \"ForestDryPoor\"   presences <- GetLandusePresences(folder, Landuse)   head(presences) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get occurrence data — GetOccs","title":"Get occurrence data — GetOccs","text":"function uses rgbif package get occurrence data Global Biodiversity Information Facility (GBIF) API.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get occurrence data — GetOccs","text":"","code":"GetOccs(   Species,   WriteFile = FALSE,   continent = NULL,   country = NULL,   shapefile = NULL,   limit = 10000,   Log = FALSE,   ... )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get occurrence data — GetOccs","text":"Species vector containing species query. WriteFile Logical. TRUE, occurrence data written Occs folder. FALSE, occurrence data returned list. continent contintent occurrences downloaded country two-letter country code (e.g., \"DK\" Denmark) define area interest. shapefile shapefile (lat/long coordinates) defining area interest. function create minimum bounding rectangle around shapefile query species occurrences. Default NULL. limit maximum number occurrences downloaded Log Logical. TRUE, log file created information progress function. ... Additional arguments passed occ_data function.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get occurrence data — GetOccs","text":"WriteFile = TRUE, function return anything. WriteFile = FALSE, list containing occurrence data species returned.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get occurrence data — GetOccs","text":"","code":"# Get occurrence data for species in FinalSpeciesList # \\donttest{ Presences <- GetOccs(Species = c(\"Abies concolor\", \"Canis lupus\"), WriteFile = FALSE) #> Starting species 1 #> 1 of 2 ready! 2024-08-29 09:18:45.214611 #> Starting species 2 #> 2 of 2 ready! 2024-08-29 09:19:29.21424 # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelAndPredictFunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Model and Predict Habitat Suitability — ModelAndPredictFunc","title":"Model and Predict Habitat Suitability — ModelAndPredictFunc","text":"function performs complete workflow modeling habitat suitability multiple species. includes sampling land-use data presence background points separately, fitting MaxEnt model predict habitat suitability based available land-use types.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelAndPredictFunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model and Predict Habitat Suitability — ModelAndPredictFunc","text":"","code":"ModelAndPredictFunc(DF, file)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelAndPredictFunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model and Predict Habitat Suitability — ModelAndPredictFunc","text":"DF data frame containing species presence data columns species name, longitude (decimalLongitude), latitude (decimalLatitude). file file path raster layer containing land-use data.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelAndPredictFunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model and Predict Habitat Suitability — ModelAndPredictFunc","text":"data frame predicted habitat suitability scores land-use type species.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelAndPredictFunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model and Predict Habitat Suitability — ModelAndPredictFunc","text":"function encompasses several steps: Grouping data species using dplyr::group_split. Sampling land-use data species presence points using SampleLanduse function. Sampling land-use data background points using SampleLanduse function. Combining presence background data, fitting MaxEnt model predict habitat suitability using ModelSpecies function, also handles duplication rows necessary.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelSpecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Species Distribution Model Based on Land-Use Data — ModelSpecies","title":"Fit a Species Distribution Model Based on Land-Use Data — ModelSpecies","text":"function fits MaxEnt model predict species distribution based land-use data. handles cases land-use types listed \"\" splitting separate \"Poor\" \"Rich\" categories.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelSpecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Species Distribution Model Based on Land-Use Data — ModelSpecies","text":"","code":"ModelSpecies(DF)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelSpecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Species Distribution Model Based on Land-Use Data — ModelSpecies","text":"DF data frame containing species presence background data, columns species, Landuse, Pres. Landuse column factor representing different land-use types, Pres indicate whether row corresponds presence (1) background (0) point.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/ModelSpecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Species Distribution Model Based on Land-Use Data — ModelSpecies","text":"data frame predicted species distribution land-use type. data frame contains columns Landuse, Pred (predicted value), species.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Richness and Phylogenetic Diversity Data — Richness_PD","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"dataset containing species richness phylogenetic diversity results along associated land use information.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"","code":"Richness_PD"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"data.table data.frame 26,433 rows 4 variables: PD Numeric. Phylogenetic Diversity calculated picante R package. SR Integer. Species Richness calculated picante R package. cell Integer. cell index raster. Landuse Character. type land use associated cell (e.g., \"ForestDryPoor\").","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"","code":"if (FALSE) { # \\dontrun{   data(Richness_PD)   head(Richness_PD) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Richness and Rarity Data — Richness_Rar","title":"Species Richness and Rarity Data — Richness_Rar","text":"dataset containing species richness results along associated Index Relative Rarity (Irr) land use information.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Richness and Rarity Data — Richness_Rar","text":"","code":"Richness_Rar"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species Richness and Rarity Data — Richness_Rar","text":"data.table data.frame 26,433 rows 4 variables: cell Numeric. cell index raster. Irr Numeric. Index Relative Rarity calculated rarity R package. Richness Integer. species richness value cell. Landuse Character. type land use associated cell (e.g., \"ForestDryPoor\").","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Richness and Rarity Data — Richness_Rar","text":"","code":"if (FALSE) { # \\dontrun{   data(Richness_Rar)   head(Richness_Rar) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/SampleLanduse.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Land-Use Data for Species Presences or Background Locations — SampleLanduse","title":"Sample Land-Use Data for Species Presences or Background Locations — SampleLanduse","text":"function samples land-use data either species presence locations background locations within specified geographic area.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/SampleLanduse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Land-Use Data for Species Presences or Background Locations — SampleLanduse","text":"","code":"SampleLanduse(DF, file, type = \"pres\")"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/SampleLanduse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Land-Use Data for Species Presences or Background Locations — SampleLanduse","text":"DF data frame containing species presence background data, columns species, decimalLongitude, decimalLatitude. file string representing path raster file contains land-use data. type string specifying whether sample land-use data species presences (\"pres\") background locations (\"bg\"). Defaults \"pres\".","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/SampleLanduse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Land-Use Data for Species Presences or Background Locations — SampleLanduse","text":"data frame sampled land-use data. data frame contains columns species, Landuse, Pres, Pres indicates whether row corresponds presence (1) background (0) point.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Phylogenetic Diversity — calc_pd","title":"Calculate Phylogenetic Diversity — calc_pd","text":"function calculates phylogenetic diversity (PD) given dataset phylogenetic tree.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Phylogenetic Diversity — calc_pd","text":"","code":"calc_pd(Fin, Tree)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Phylogenetic Diversity — calc_pd","text":"Fin data frame data table containing species presence data. data include columns species, cell, Landuse. Tree phylogenetic tree object, typically generated V.PhyloMaker::phylo.maker function. tree must contain component named scenario.3 tip labels.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Phylogenetic Diversity — calc_pd","text":"data table containing calculated phylogenetic diversity (PD) cell, along associated cell Landuse.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Phylogenetic Diversity — calc_pd","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   Fin <- data.table(     cell = c(1, 1, 2, 2),     species = c(\"species_a\", \"species_b\", \"species_a\", \"species_c\"),     Landuse = c(\"forest\", \"forest\", \"grassland\", \"grassland\")   )    # Assume this generates a valid tree object   Tree <- V.PhyloMaker::phylo.maker(...)    # Calculate phylogenetic diversity   pd_results <- calc_pd(Fin, Tree)   print(pd_results) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Presences of Species within a Specified Area — count_presences","title":"Count Presences of Species within a Specified Area — count_presences","text":"function counts number occurrences specified species within defined area. area can specified using shapefile two-letter country code. function uses rgbif package query species occurrences returns data.frame results.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Presences of Species within a Specified Area — count_presences","text":"","code":"count_presences(species, shapefile = NULL, country = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Presences of Species within a Specified Area — count_presences","text":"species data.frame containing columns family, genus, species. taxonomic details species want count occurrences. shapefile shapefile (lat/long coordinates) defining area interest. function create minimum bounding rectangle around shapefile query species occurrences. Default NULL. country two-letter country code (e.g., \"DK\" Denmark) define area interest. Default NULL.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Presences of Species within a Specified Area — count_presences","text":"data.frame columns family, genus, species, N N represents number occurrences species within defined area.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Presences of Species within a Specified Area — count_presences","text":"","code":"# Example species data.frame species <- structure(list(family = \"Polytrichaceae\", genus = \"Atrichum\",                           species = \"Atrichum undulatum\"), row.names = c(NA, -1L),                      class = c(\"tbl_df\", \"tbl\", \"data.frame\"))  # Example 1: Using a country code df_country <- count_presences(species, country = \"DK\") print(df_country) #>            family    genus            species     N #>            <char>   <char>             <char> <num> #> 1: Polytrichaceae Atrichum Atrichum undulatum  1594  # Example 2: Using a shapefile # Assuming \"Aarhus.shp\" is in the working directory f <- system.file(\"ex/Aarhus.shp\", package=\"SpeciesPoolR\") df_shapefile <- count_presences(species, shapefile = f) print(df_shapefile) #>            family    genus            species     N #>            <char>   <char>             <char> <num> #> 1: Polytrichaceae Atrichum Atrichum undulatum    76"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/create_thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Prediction Thresholds for Species Distribution Models — create_thresholds","title":"Create Prediction Thresholds for Species Distribution Models — create_thresholds","text":"function generates thresholds species distribution predictions based modeled land-use preferences. Thresholds calculated 99th, 95th, 90th percentiles predicted values.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/create_thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Prediction Thresholds for Species Distribution Models — create_thresholds","text":"","code":"create_thresholds(Model, reference, file)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/create_thresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Prediction Thresholds for Species Distribution Models — create_thresholds","text":"Model data frame containing model predictions, columns species, Landuse, Pred. reference data frame containing reference species presence data threshold calibration. file string representing path raster file contains land-use data.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/create_thresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Prediction Thresholds for Species Distribution Models — create_thresholds","text":"data frame calculated thresholds. data frame contains columns species, Thres_99, Thres_95, Thres_90.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"function takes data.table species richness results path raster template. generates SpatRaster object using terra package, populates species richness values, writes result Cloud-Optimized GeoTIFF.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"","code":"export_richness(Results, path, folder)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"Results data.table containing species richness results. data.table must contain least columns cell SR, cell refers cell index raster SR refers species richness value. path character string specifying file path raster template. raster used template output raster. folder folder store Cloud-Optimized GeoTIFF.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   data(Richness_PD)   template_path <- system.file(\"ex/LU.tif\", package=\"SpeciesPoolR\")   output_folder <- \"Results/Richness\"   output_path <- export_richness(Richness_PD, template_path, output_folder) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Phylogenetic Tree — generate_tree","title":"Generate Phylogenetic Tree — generate_tree","text":"function takes CSV file path, reads data, generates phylogenetic tree using V.PhyloMaker package.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Phylogenetic Tree — generate_tree","text":"","code":"generate_tree(DF)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Phylogenetic Tree — generate_tree","text":"DF data.frame. data.frame must contain columns named species, genus, family.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Phylogenetic Tree — generate_tree","text":"phylogenetic tree object generated V.PhyloMaker::phylo.maker function.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in Data from a CSV or XLSX File — get_data","title":"Read in Data from a CSV or XLSX File — get_data","text":"function reads data CSV XLSX file. file must contain \"Species\" column. can optionally apply filter expression dataset returning . function returns data.frame filtered results processing pipeline.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in Data from a CSV or XLSX File — get_data","text":"","code":"get_data(file, filter = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in Data from a CSV or XLSX File — get_data","text":"file string specifying path CSV XLSX file read. file must contain \"Species\" column. filter optional expression used filter resulting data.frame. expression written using dplyr::filter(). default NULL, meaning filtering applied.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in Data from a CSV or XLSX File — get_data","text":"data.frame containing data read file, optionally filtered.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in Data from a CSV or XLSX File — get_data","text":"","code":"if (FALSE) { # \\dontrun{ # Read in data without filtering f <- system.file(\"ex/Species_List.csv\", package=\"SpeciesPoolR\") data <- get_data(f)  # Read in data and filter for Plantae kingdom and certain taxon ranges filtered_data <- get_data(   file = f,   filter = quote(    Kingdom == \"Plantae\" &    Class == \"Magnoliopsida\"   ) ) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Occurrence Data for a Given Species List — get_presences","title":"Get Occurrence Data for a Given Species List — get_presences","text":"function retrieves occurrence data given list species using GetOccs function. function designed fetch data species Denmark (country = \"DK\") 1999 2023 return cleaned data frame selected columns.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Occurrence Data for a Given Species List — get_presences","text":"","code":"get_presences(species, country = NULL, shapefile = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Occurrence Data for a Given Species List — get_presences","text":"species vector species use. country two-letter country code (e.g., \"DK\" Denmark) define area interest. shapefile shapefile (lat/long coordinates) defining area interest. function create minimum bounding rectangle around shapefile query species occurrences. Default NULL.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Occurrence Data for a Given Species List — get_presences","text":"data.frame containing occurrence data specified species, including columns: scientificName, decimalLatitude, decimalLongitude, family, genus, species.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Occurrence Data for a Given Species List — get_presences","text":"","code":"if (FALSE) { # \\dontrun{ # Assume `species_list` is a data.frame with a column named `species` presences <- get_presences(species_list) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/make_buffer_rasterized.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Rasterized Buffer Around Species Occurrences and Convert to Long Format — make_buffer_rasterized","title":"Generate a Rasterized Buffer Around Species Occurrences and Convert to Long Format — make_buffer_rasterized","text":"function takes species occurrence data, generates buffer around occurrence point, rasterizes buffer onto given raster template, converts resulting raster data long-format data.table. buffer distance can specified user.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/make_buffer_rasterized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Rasterized Buffer Around Species Occurrences and Convert to Long Format — make_buffer_rasterized","text":"","code":"make_buffer_rasterized(DT, file, dist = 500)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/make_buffer_rasterized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Rasterized Buffer Around Species Occurrences and Convert to Long Format — make_buffer_rasterized","text":"DT data.table data.frame containing species occurrence data. data include columns: decimalLatitude, decimalLongitude, family, genus, species. file file path raster file used template rasterizing buffers. dist numeric value specifying buffer distance meters. Default 500 meters.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/make_buffer_rasterized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Rasterized Buffer Around Species Occurrences and Convert to Long Format — make_buffer_rasterized","text":"data.table long format two columns: cell, indicating raster cell number, species, indicating species name corresponding cell.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/make_buffer_rasterized.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Rasterized Buffer Around Species Occurrences and Convert to Long Format — make_buffer_rasterized","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming DT contains species occurrence data and 'raster_file.tif' is the raster template buffer_df <- make_buffer_rasterized(DT, file = \"raster_file.tif\", dist = 500) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the SpeciesPoolR Workflow — run_workflow","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"function sets runs targets workflow using functions provided SpeciesPoolR package. workflow includes steps cleaning species data, counting species presences, filtering data, generating buffers spatial analysis.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"","code":"run_workflow(   workers = 2,   error = \"null\",   file_path,   rastertemp,   rasterLU,   dist = 500,   filter = NULL,   country = NULL,   shapefile = NULL,   plot = TRUE )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"workers Number parallel workers use crew controller. Default 2. error Handling errors outdated targets. Default \"null\". file_path Path Excel csv file containing data. rastertemp file path raster file used template rasterizing buffers. rasterLU file path raster file landuses exist area modeled. dist numeric value specifying buffer distance meters. Default 500 meters. filter optional expression used filter resulting data.frame. expression written using dplyr::filter(). default NULL, meaning filtering applied. country two-letter country code define area interest counting species presences. Default NULL. shapefile Path shapefile defining area interest counting species presences. Default NULL. plot TRUE (default) run targets::tar_visnetwork() plot workflow","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"Executes targets pipeline.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Cloud Optimized Geotiff (COG) — write_cog","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"function takes SpatRaster object saves Cloud Optimized Geotiff (COG). COGs geospatial files optimized efficient cloud storage retrieval.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"","code":"write_cog(SpatRaster, Name)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"SpatRaster SpatRaster object (class SpatRaster) representing raster data saved COG. Name desired name COG file, including \".tif\" extension.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"Cloud Optimized Geotiff saved specified location.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"","code":"# Load required libraries if not already loaded # library(terra)  # Create a sample SpatRaster r <- terra::rast(nrows = 5, ncols = 5, vals = 1:25)  # Save the SpatRaster as a COG write_cog(SpatRaster = r, Name = \"test.tif\")  # Clean up later file.remove(\"test.tif\") #> [1] TRUE file.remove(\"test.tfw\") #> [1] TRUE"}]
