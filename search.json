[{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 SpeciesPoolR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"summary-metrics","dir":"Articles","previous_headings":"","what":"Summary metrics","title":"How to use the SpeciesPoolR package","text":"Now habitat species can found, can generate several summary metrics, start reading resulting potential occurrence species .","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"read-in-presences-from-a-folder","dir":"Articles","previous_headings":"Summary metrics","what":"Read in Presences from a folder","title":"How to use the SpeciesPoolR package","text":"first thing read Presences folder, function GetLandusePresences seen following code first 10 lines file","code":"folder <- system.file(\"ex/\", package=\"SpeciesPoolR\") Landuse <- \"ForestDryPoor\" presences <- GetLandusePresences(folder, Landuse)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Derek Corcoran. Author, maintainer.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Corcoran D (2024). SpeciesPoolR: Creates Species Pools Potential Habitats. R package version 0.0.0.9000, https://derek-corcoran-barrios.github.io/SpeciesPoolR/, https://github.com/derek-corcoran-barrios/SpeciesPoolR.","code":"@Manual{,   title = {SpeciesPoolR: Creates Species Pools For Potential Habitats},   author = {Derek Corcoran},   year = {2024},   note = {R package version 0.0.0.9000, https://derek-corcoran-barrios.github.io/SpeciesPoolR/},   url = {https://github.com/derek-corcoran-barrios/SpeciesPoolR}, }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"speciespoolr","dir":"","previous_headings":"","what":"Creates Species Pools For Potential Habitats","title":"Creates Species Pools For Potential Habitats","text":"goal SpeciesPoolR package generate potential species pools summary metrics spatial way.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Creates Species Pools For Potential Habitats","text":"can install development version SpeciesPoolR GitHub : can load package","code":"# install.packages(\"devtools\") devtools::install_github(\"derek-corcoran-barrios/SpeciesPoolR\") library(SpeciesPoolR)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"summary-metrics","dir":"","previous_headings":"","what":"Summary metrics","title":"Creates Species Pools For Potential Habitats","text":"Now habitat species can found, can generate several summary metrics, start reading resulting potential occurrence species .","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"read-in-presences-from-a-folder","dir":"","previous_headings":"","what":"Read in Presences from a folder","title":"Creates Species Pools For Potential Habitats","text":"first thing read Presences folder, function GetLandusePresences seen following code first 10 lines file","code":"folder <- system.file(\"ex/\", package=\"SpeciesPoolR\") Landuse <- \"ForestDryPoor\" presences <- GetLandusePresences(folder, Landuse)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean taxa using Taxize and rgbif — Clean_Taxa","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"function cleans vector taxa using Taxize rgbif","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"","code":"Clean_Taxa(Taxons, WriteFile = F, Species_Only = T)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"Taxons Vector taxa cleaned. WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results) Species_Only logical, TRUE (default) species returned, FALSE, return highest possible taxonomic resolution","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"data frame cleaned taxa scores.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"Chamberlain, Scott T., et al. \"Taxize: R package taxonomic lookup manipulation.\" Methods Ecology Evolution 6.12 (2015): 1451-1456. Chamberlain S, Barve V, Mcglinn D, Oldoni D, Desmet P, Geffert L, Ram K (2023). rgbif: Interface Global Biodiversity Information Facility API_ R package version 3.7.4","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"","code":"Cleaned <- Clean_Taxa(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` #> Joining with `by = join_by(matched_name2)`"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean taxa using Taxize — Clean_Taxa_Taxize","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"function cleans vector taxa using Taxize.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"","code":"Clean_Taxa_Taxize(Taxons, WriteFile = F)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"Taxons Vector taxa cleaned. WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results)","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"data frame cleaned taxa scores.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"Chamberlain, Scott T., et al. \"Taxize: R package taxonomic lookup manipulation.\" Methods Ecology Evolution 6.12 (2015): 1451-1456.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"","code":"Clean_Taxa_Taxize(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` #> # A tibble: 1 × 4 #>   Taxa        score matched_name2 TaxaID #>   <chr>       <dbl> <chr>          <int> #> 1 Canis lupus 0.988 Canis lupus        1"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Taxa from GBIF — Clean_Taxa_rgbif","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Clean taxonomic list using GBIF","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"","code":"Clean_Taxa_rgbif(Cleaned_Taxize, WriteFile = F, Species_Only = T)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Cleaned_Taxize data frame containing cleaned taxonomic list function Clean_Taxa_Taxize WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results) Species_Only logical, TRUE (default) species returned, FALSE, return highest possible taxonomic resolution","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"csv file containing cleaned taxonomic list","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Chamberlain S, Barve V, Mcglinn D, Oldoni D, Desmet P, Geffert L, Ram K (2023). rgbif: Interface Global Biodiversity Information Facility API_ R package version 3.7.4,","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"","code":"Cleaned_Taxize <- Clean_Taxa_Taxize(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` Clean_Taxa_rgbif(Cleaned_Taxize) #> Joining with `by = join_by(matched_name2)` #> # A tibble: 1 × 12 #> # Groups:   species [1] #>   Taxa  matched_name2 confidence canonicalName kingdom phylum class order family #>   <chr> <chr>              <int> <chr>         <chr>   <chr>  <chr> <chr> <chr>  #> 1 Cani… Canis lupus           99 Canis lupus   Animal… Chord… Mamm… Carn… Canid… #> # ℹ 3 more variables: genus <chr>, species <chr>, rank <chr>"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Landuse Presences — GetLandusePresences","title":"Get Landuse Presences — GetLandusePresences","text":"function reads combines species presence data multiple files within specified folder given land use type.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Landuse Presences — GetLandusePresences","text":"","code":"GetLandusePresences(folder, Landuse)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Landuse Presences — GetLandusePresences","text":"folder character string specifying path folder containing land use data files. Landuse character string specifying land use type presence data read. function assumes files located subdirectories named land use type within specified folder.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Landuse Presences — GetLandusePresences","text":"data frame containing combined species presence data columns cell, species, Landuse.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Landuse Presences — GetLandusePresences","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   folder <- system.file(\"ex/\", package=\"SpeciesPoolR\")   list.files(folder, pattern = \".zip\")   Landuse <- \"ForestDryPoor\"   presences <- GetLandusePresences(folder, Landuse)   head(presences) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Richness and Phylogenetic Diversity Data — Richness_PD","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"dataset containing species richness phylogenetic diversity results along associated land use information.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"","code":"Richness_PD"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"data.table data.frame 26,433 rows 4 variables: PD Numeric. Phylogenetic Diversity calculated picante R package. SR Integer. Species Richness calculated picante R package. cell Integer. cell index raster. Landuse Character. type land use associated cell (e.g., \"ForestDryPoor\").","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"","code":"if (FALSE) { # \\dontrun{   data(Richness_PD)   head(Richness_PD) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Richness and Rarity Data — Richness_Rar","title":"Species Richness and Rarity Data — Richness_Rar","text":"dataset containing species richness results along associated Index Relative Rarity (Irr) land use information.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Richness and Rarity Data — Richness_Rar","text":"","code":"Richness_Rar"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species Richness and Rarity Data — Richness_Rar","text":"data.table data.frame 26,433 rows 4 variables: cell Numeric. cell index raster. Irr Numeric. Index Relative Rarity calculated rarity R package. Richness Integer. species richness value cell. Landuse Character. type land use associated cell (e.g., \"ForestDryPoor\").","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Richness and Rarity Data — Richness_Rar","text":"","code":"if (FALSE) { # \\dontrun{   data(Richness_Rar)   head(Richness_Rar) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Phylogenetic Diversity — calc_pd","title":"Calculate Phylogenetic Diversity — calc_pd","text":"function calculates phylogenetic diversity (PD) given dataset phylogenetic tree.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Phylogenetic Diversity — calc_pd","text":"","code":"calc_pd(Fin, Tree)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Phylogenetic Diversity — calc_pd","text":"Fin data frame data table containing species presence data. data include columns species, cell, Landuse. Tree phylogenetic tree object, typically generated V.PhyloMaker::phylo.maker function. tree must contain component named scenario.3 tip labels.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Phylogenetic Diversity — calc_pd","text":"data table containing calculated phylogenetic diversity (PD) cell, along associated cell Landuse.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Phylogenetic Diversity — calc_pd","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   Fin <- data.table(     cell = c(1, 1, 2, 2),     species = c(\"species_a\", \"species_b\", \"species_a\", \"species_c\"),     Landuse = c(\"forest\", \"forest\", \"grassland\", \"grassland\")   )    # Assume this generates a valid tree object   Tree <- V.PhyloMaker::phylo.maker(...)    # Calculate phylogenetic diversity   pd_results <- calc_pd(Fin, Tree)   print(pd_results) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Presences of Species within a Specified Area — count_presences","title":"Count Presences of Species within a Specified Area — count_presences","text":"function counts number occurrences specified species within defined area. area can specified using shapefile two-letter country code. function uses rgbif package query species occurrences returns data.frame results.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Presences of Species within a Specified Area — count_presences","text":"","code":"count_presences(species, shapefile = NULL, country = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Presences of Species within a Specified Area — count_presences","text":"species data.frame containing columns family, genus, species. taxonomic details species want count occurrences. shapefile shapefile (lat/long coordinates) defining area interest. function create minimum bounding rectangle around shapefile query species occurrences. Default NULL. country two-letter country code (e.g., \"DK\" Denmark) define area interest. Default NULL.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Presences of Species within a Specified Area — count_presences","text":"data.frame columns family, genus, species, N N represents number occurrences species within defined area.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Presences of Species within a Specified Area — count_presences","text":"","code":"# Example species data.frame species <- structure(list(family = \"Polytrichaceae\", genus = \"Atrichum\",                           species = \"Atrichum undulatum\"), row.names = c(NA, -1L),                      class = c(\"tbl_df\", \"tbl\", \"data.frame\"))  # Example 1: Using a country code df_country <- count_presences(species, country = \"DK\") print(df_country) #>            family    genus            species     N #>            <char>   <char>             <char> <num> #> 1: Polytrichaceae Atrichum Atrichum undulatum  1594  # Example 2: Using a shapefile # Assuming \"Aarhus.shp\" is in the working directory f <- system.file(\"ex/Aarhus.shp\", package=\"SpeciesPoolR\") df_shapefile <- count_presences(species, shapefile = f) print(df_shapefile) #>            family    genus            species     N #>            <char>   <char>             <char> <num> #> 1: Polytrichaceae Atrichum Atrichum undulatum    76"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"function takes data.table species richness results path raster template. generates SpatRaster object using terra package, populates species richness values, writes result Cloud-Optimized GeoTIFF.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"","code":"export_richness(Results, path, folder)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"Results data.table containing species richness results. data.table must contain least columns cell SR, cell refers cell index raster SR refers species richness value. path character string specifying file path raster template. raster used template output raster. folder folder store Cloud-Optimized GeoTIFF.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   data(Richness_PD)   template_path <- system.file(\"ex/LU.tif\", package=\"SpeciesPoolR\")   output_folder <- \"Results/Richness\"   output_path <- export_richness(Richness_PD, template_path, output_folder) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Phylogenetic Tree — generate_tree","title":"Generate Phylogenetic Tree — generate_tree","text":"function takes CSV file path, reads data, generates phylogenetic tree using V.PhyloMaker package.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Phylogenetic Tree — generate_tree","text":"","code":"generate_tree(DF)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Phylogenetic Tree — generate_tree","text":"DF character string specifying file path CSV file. CSV file must contain columns named species, genus, family.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Phylogenetic Tree — generate_tree","text":"phylogenetic tree object generated V.PhyloMaker::phylo.maker function.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Phylogenetic Tree — generate_tree","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   p <- system.file(\"ex/Clean_Species.csv\", package=\"SpeciesPoolR\")   tree <- generate_tree(p)  } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in Data from a CSV or XLSX File — get_data","title":"Read in Data from a CSV or XLSX File — get_data","text":"function reads data CSV XLSX file. file must contain \"Species\" column. can optionally apply filter expression dataset returning . function returns data.frame filtered results processing pipeline.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in Data from a CSV or XLSX File — get_data","text":"","code":"get_data(file, filter = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in Data from a CSV or XLSX File — get_data","text":"file string specifying path CSV XLSX file read. file must contain \"Species\" column. filter optional expression used filter resulting data.frame. expression written using dplyr::filter(). default NULL, meaning filtering applied.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in Data from a CSV or XLSX File — get_data","text":"data.frame containing data read file, optionally filtered.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in Data from a CSV or XLSX File — get_data","text":"","code":"if (FALSE) { # \\dontrun{ # Read in data without filtering f <- system.file(\"ex/Species_List.csv\", package=\"SpeciesPoolR\") data <- get_data(f)  # Read in data and filter for Plantae kingdom and certain taxon ranges filtered_data <- get_data(   file = f,   filter = quote(    Kingdom == \"Plantae\" &    Class == \"Magnoliopsida\"   ) ) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the SpeciesPoolR Workflow — run_workflow","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"function sets runs targets workflow using functions provided SpeciesPoolR package. workflow includes steps cleaning species data, counting species presences, filtering data, generating buffers spatial analysis.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"","code":"run_workflow(   workers = 4,   error = \"null\",   file_path,   landuse_suitability,   landuse_tiff,   n = 5 )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"workers Number parallel workers use crew controller. Default 4. error Handling errors outdated targets. Default \"null\". file_path Path Excel csv file containing data. landuse_suitability Path land use suitability raster file. landuse_tiff Path land use TIFF file. n Minimum number occurrences species filtering. Default 5.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"Executes targets pipeline.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Cloud Optimized Geotiff (COG) — write_cog","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"function takes SpatRaster object saves Cloud Optimized Geotiff (COG). COGs geospatial files optimized efficient cloud storage retrieval.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"","code":"write_cog(SpatRaster, Name)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"SpatRaster SpatRaster object (class SpatRaster) representing raster data saved COG. Name desired name COG file, including \".tif\" extension.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"Cloud Optimized Geotiff saved specified location.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"","code":"# Load required libraries if not already loaded # library(terra)  # Create a sample SpatRaster r <- terra::rast(nrows = 5, ncols = 5, vals = 1:25)  # Save the SpatRaster as a COG write_cog(SpatRaster = r, Name = \"test.tif\")  # Clean up later file.remove(\"test.tif\") #> [1] TRUE file.remove(\"test.tfw\") #> [1] TRUE"}]
