[{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 SpeciesPoolR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"speciespoolr","dir":"Articles","previous_headings":"","what":"SpeciesPoolR","title":"How to use the SpeciesPoolR package","text":"goal SpeciesPoolR package generate potential species pools summary metrics spatial way. can install package directly GitHub: can load package","code":"#install.packages(\"remotes\") remotes::install_github(\"derek-corcoran-barrios/SpeciesPoolR\") library(SpeciesPoolR)"},{"path":[]},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-1-reading-and-filtering-data","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Importing and Downloading Species Presences","what":"Step 1: Reading and Filtering Data","title":"How to use the SpeciesPoolR package","text":"going use functions SpeciesPoolR manually sequentially, first step read species list either CSV XLSX file. can use get_data function . function allows filter data dplyr-like style: generate dataset can used subsequently count species presences download species data seen table @ref(tab:tablespecies) Species used generate species pools","code":"f <- system.file(\"ex/Species_List.csv\", package=\"SpeciesPoolR\") filtered_data <- get_data(    file = f,    filter = quote(Kingdom == \"Plantae\" &                      Class == \"Magnoliopsida\" &                      Family == \"Fabaceae\") ) #> Rows: 200 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (8): redlist_2010, Kingdom, Phyllum, Class, Order, Family, Genus, Species #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-2-taxonomic-harmonization","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Importing and Downloading Species Presences","what":"Step 2: Taxonomic Harmonization","title":"How to use the SpeciesPoolR package","text":"Next, perform taxonomic harmonization ensure species names use recognized GBIF taxonomic backbone. can done using Clean_Taxa function: resulting data frame, harmonized species names, shown table @ref(tab:cleantable) Taxonomicallty harmonized dataset","code":"Clean_Species <- SpeciesPoolR::Clean_Taxa(filtered_data$Species) #> Joining with `by = join_by(Taxa)` #> Joining with `by = join_by(matched_name2)`"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"step-3-counting-species-presences","dir":"Articles","previous_headings":"Using SpeciesPoolR Manually > Importing and Downloading Species Presences","what":"Step 3: Counting Species Presences","title":"How to use the SpeciesPoolR package","text":"harmonizing species names, ’s important obtain number occurrences species study area, especially plan calculate rarity. can using count_presences function. function allows filter occurrences country shapefile. example Denmark: resulting data frame species presences Denmark shown table @ref(tab:tableCountDenmark) Counts presences different species within Denmark Alternatively, can filter specific region using shapefile. example, count species presences within Aarhus commune: resulting data.frame Aarhus commune shown int table @ref(tab:tableCountAarhus) Counts presences different species within Aarhus commune Now recommended eliminate species occurrences area, done automatically workflow version: can retrieve species presences using function SpeciesPoolR::get_presences. end 1070 presences 7 species.","code":"# Assuming Clean_Species is your data frame Count_DK <- count_presences(Clean_Species, country = \"DK\") knitr::kable(Count_DK, caption = \"Counts of presences for the different species within Denmark\") shp <- system.file(\"ex/Aarhus.shp\", package=\"SpeciesPoolR\")  Count_Aarhus <- count_presences(Clean_Species, shapefile = shp) library(data.table) Count_Aarhus <- Count_Aarhus[N > 0,] Presences <- get_presences(species = Count_Aarhus$species, shapefile = shp) #> [1] \"Geometry created: POLYGON ((10.401438 56.302419, 10.048024 56.355225, 9.886316 56.019928, 10.239729 55.966657, 10.401438 56.302419))\" #> Starting species 1 #> 1 of 7 ready! 2024-08-22 13:35:54.472922 #> Starting species 2 #> 2 of 7 ready! 2024-08-22 13:35:54.82879 #> Starting species 3 #> 3 of 7 ready! 2024-08-22 13:35:55.845192 #> Starting species 4 #> 4 of 7 ready! 2024-08-22 13:35:56.217292 #> Starting species 5 #> 5 of 7 ready! 2024-08-22 13:35:56.813774 #> Starting species 6 #> 6 of 7 ready! 2024-08-22 13:35:57.182109 #> Starting species 7 #> 7 of 7 ready! 2024-08-22 13:35:57.530911"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"running-the-speciespoolr-workflow","dir":"Articles","previous_headings":"","what":"Running the SpeciesPoolR Workflow","title":"How to use the SpeciesPoolR package","text":"prefer automate process run SpeciesPoolR workflow pipeline, can use run_workflow function. function sets targets workflow sequentially executes steps cleaning species data, counting species presences, performing spatial analysis. approach especially useful larger datasets want ensure reproducibility. run workflow, can use following code. ’ll use species filter , focusing Plantae kingdom, Magnoliopsida class, Fabaceae family. Additionally, ’ll focus Aarhus commune using shapefile.","code":"shp <- system.file(\"ex/Aarhus.shp\", package = \"SpeciesPoolR\")  run_workflow(   file_path = system.file(\"ex/Species_List.csv\", package = \"SpeciesPoolR\"),   filter = quote(Kingdom == \"Plantae\" & Class == \"Magnoliopsida\" & Family == \"Fabaceae\"),   shapefile = shp ) #> ▶ dispatched target shp #> ▶ dispatched target file #> ● completed target shp [3.663 seconds] #> ● completed target file [3.669 seconds] #> ▶ dispatched target data #> ● completed target data [0.157 seconds] #> ▶ dispatched target Clean #> ● completed target Clean [1.179 seconds] #> ▶ dispatched branch Count_Presences_33538e94b3809372 #> ▶ dispatched branch Count_Presences_52d72a5ad405e933 #> ● completed branch Count_Presences_33538e94b3809372 [0.478 seconds] #> ▶ dispatched branch Count_Presences_e70f77d9439a4770 #> ● completed branch Count_Presences_52d72a5ad405e933 [0.531 seconds] #> ▶ dispatched branch Count_Presences_dea4ef8633a449a1 #> ● completed branch Count_Presences_e70f77d9439a4770 [0.151 seconds] #> ▶ dispatched branch Count_Presences_69210fc440d13855 #> ● completed branch Count_Presences_dea4ef8633a449a1 [0.134 seconds] #> ▶ dispatched branch Count_Presences_a61be030e01ebaf5 #> ● completed branch Count_Presences_69210fc440d13855 [0.106 seconds] #> ▶ dispatched branch Count_Presences_974105e269324d3e #> ● completed branch Count_Presences_a61be030e01ebaf5 [0.106 seconds] #> ▶ dispatched branch Count_Presences_37d1f8d5f74d852c #> ● completed branch Count_Presences_974105e269324d3e [0.106 seconds] #> ● completed branch Count_Presences_37d1f8d5f74d852c [0.107 seconds] #> ● completed pattern Count_Presences #> ▶ dispatched target More_than_zero #> ● completed target More_than_zero [0 seconds] #> ▶ dispatched branch Presences_c112b37cd15959d6 #> ▶ dispatched branch Presences_af64bac105a08467 #> ● completed branch Presences_af64bac105a08467 [0.942 seconds] #> ▶ dispatched branch Presences_daf8d6353bc80f0c #> ● completed branch Presences_c112b37cd15959d6 [1.505 seconds] #> ▶ dispatched branch Presences_310adeccf6b44725 #> ● completed branch Presences_310adeccf6b44725 [0.41 seconds] #> ▶ dispatched branch Presences_e65f4227e8299cc4 #> ● completed branch Presences_daf8d6353bc80f0c [1.049 seconds] #> ▶ dispatched branch Presences_d4b9dc68293bd5b2 #> ● completed branch Presences_d4b9dc68293bd5b2 [0.362 seconds] #> ▶ dispatched branch Presences_88937156c1302a12 #> ● completed branch Presences_e65f4227e8299cc4 [0.617 seconds] #> ● completed branch Presences_88937156c1302a12 [0.346 seconds] #> ● completed pattern Presences #> ▶ ended pipeline [10.872 seconds] #>"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/articles/how_to_use.html","id":"how-it-works","dir":"Articles","previous_headings":"Running the SpeciesPoolR Workflow","what":"How It Works","title":"How to use the SpeciesPoolR package","text":"run_workflow function creates pipeline : 1- Reads data specified file path. 2- Filters data using provided filter expression. 3- Cleans species names match GBIF taxonomic backbone. 4- Counts species presences within specified geographic area (case, Aarhus). 5- Generates visual representation workflow (plot = TRUE). can monitor progress workflow visualize dependencies steps using targets::tar_visnetwork(). result similar running steps manually added benefits parallel execution reproducibility. automated approach allows streamline analysis ensures steps consistently applied data. also makes easier rerun workflow different parameters datasets.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Derek Corcoran. Author, maintainer.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Corcoran D (2024). SpeciesPoolR: Creates Species Pools Potential Habitats. R package version 0.0.0.9000, https://derek-corcoran-barrios.github.io/SpeciesPoolR/, https://github.com/derek-corcoran-barrios/SpeciesPoolR.","code":"@Manual{,   title = {SpeciesPoolR: Creates Species Pools For Potential Habitats},   author = {Derek Corcoran},   year = {2024},   note = {R package version 0.0.0.9000, https://derek-corcoran-barrios.github.io/SpeciesPoolR/},   url = {https://github.com/derek-corcoran-barrios/SpeciesPoolR}, }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_1-speciespoolr","dir":"","previous_headings":"","what":"Creates Species Pools For Potential Habitats","title":"Creates Species Pools For Potential Habitats","text":"goal SpeciesPoolR package generate potential species pools summary metrics spatial way. can install package directly GitHub: can load package","code":"#install.packages(\"remotes\") remotes::install_github(\"derek-corcoran-barrios/SpeciesPoolR\") library(SpeciesPoolR)"},{"path":[]},{"path":[]},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_211-step-1-reading-and-filtering-data","dir":"","previous_headings":"2.1 Importing and Downloading Species Presences","what":"2.1.1 Step 1: Reading and Filtering Data","title":"Creates Species Pools For Potential Habitats","text":"going use functions SpeciesPoolR manually sequentially, first step read species list either CSV XLSX file. can use get_data function . function allows filter data dplyr-like style: generate dataset can used subsequently count species presences download species data seen table 2.1 Table 2.1: Species used generate species pools","code":"f <- system.file(\"ex/Species_List.csv\", package=\"SpeciesPoolR\") filtered_data <- get_data(    file = f,    filter = quote(Kingdom == \"Plantae\" &                      Class == \"Magnoliopsida\" &                      Family == \"Fabaceae\") )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_212-step-2-taxonomic-harmonization","dir":"","previous_headings":"2.1 Importing and Downloading Species Presences","what":"2.1.2 Step 2: Taxonomic Harmonization","title":"Creates Species Pools For Potential Habitats","text":"Next, perform taxonomic harmonization ensure species names use recognized GBIF taxonomic backbone. can done using Clean_Taxa function: resulting data frame, harmonized species names, shown table 2.2 Table 2.2: Taxonomicallty harmonized dataset","code":"Clean_Species <- SpeciesPoolR::Clean_Taxa(filtered_data$Species)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_213-step-3-counting-species-presences","dir":"","previous_headings":"2.1 Importing and Downloading Species Presences","what":"2.1.3 Step 3: Counting Species Presences","title":"Creates Species Pools For Potential Habitats","text":"harmonizing species names, ’s important obtain number occurrences species study area, especially plan calculate rarity. can using count_presences function. function allows filter occurrences country shapefile. example Denmark: resulting data frame species presences Denmark shown table 2.3 Table 2.3: Counts presences different species within Denmark Alternatively, can filter specific region using shapefile. example, count species presences within Aarhus commune: resulting data.frame Aarhus commune shown int table 2.4 Table 2.4: Counts presences different species within Aarhus commune Now recommended eliminate species occurrences area, done automatically workflow version: can retrieve species presences using function SpeciesPoolR::get_presences. end 1070 presences 7 species.","code":"# Assuming Clean_Species is your data frame Count_DK <- count_presences(Clean_Species, country = \"DK\") knitr::kable(Count_DK, caption = \"Counts of presences for the different species within Denmark\") shp <- system.file(\"ex/Aarhus.shp\", package=\"SpeciesPoolR\")  Count_Aarhus <- count_presences(Clean_Species, shapefile = shp) library(data.table) Count_Aarhus <- Count_Aarhus[N > 0,] Presences <- get_presences(species = Count_Aarhus$species, shapefile = shp) #> [1] \"Geometry created: POLYGON ((10.401438 56.302419, 10.048024 56.355225, 9.886316 56.019928, 10.239729 55.966657, 10.401438 56.302419))\""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_3-running-the-speciespoolr-workflow","dir":"","previous_headings":"","what":"3 Running the SpeciesPoolR Workflow","title":"Creates Species Pools For Potential Habitats","text":"prefer automate process run SpeciesPoolR workflow pipeline, can use run_workflow function. function sets targets workflow sequentially executes steps cleaning species data, counting species presences, performing spatial analysis. approach especially useful larger datasets want ensure reproducibility. run workflow, can use following code. ’ll use species filter , focusing Plantae kingdom, Magnoliopsida class, Fabaceae family. Additionally, ’ll focus Aarhus commune using shapefile.","code":"shp <- system.file(\"ex/Aarhus.shp\", package = \"SpeciesPoolR\")  run_workflow(   file_path = system.file(\"ex/Species_List.csv\", package = \"SpeciesPoolR\"),   filter = quote(Kingdom == \"Plantae\" & Class == \"Magnoliopsida\" & Family == \"Fabaceae\"),   shapefile = shp ) #> ▶ dispatched target shp #> ▶ dispatched target file #> ● completed target shp [4.844 seconds] #> ● completed target file [0 seconds] #> ▶ dispatched target data #> ● completed target data [10.3 seconds] #> ▶ dispatched target Clean #> ● completed target Clean [1.12 seconds] #> ▶ dispatched branch Count_Presences_33538e94b3809372 #> ▶ dispatched branch Count_Presences_52d72a5ad405e933 #> ● completed branch Count_Presences_33538e94b3809372 [0.198 seconds] #> ▶ dispatched branch Count_Presences_e70f77d9439a4770 #> ● completed branch Count_Presences_e70f77d9439a4770 [0.096 seconds] #> ▶ dispatched branch Count_Presences_dea4ef8633a449a1 #> ● completed branch Count_Presences_dea4ef8633a449a1 [0.021 seconds] #> ▶ dispatched branch Count_Presences_69210fc440d13855 #> ● completed branch Count_Presences_69210fc440d13855 [0.028 seconds] #> ▶ dispatched branch Count_Presences_a61be030e01ebaf5 #> ● completed branch Count_Presences_a61be030e01ebaf5 [0.031 seconds] #> ▶ dispatched branch Count_Presences_974105e269324d3e #> ● completed branch Count_Presences_974105e269324d3e [0.04 seconds] #> ▶ dispatched branch Count_Presences_37d1f8d5f74d852c #> ● completed branch Count_Presences_37d1f8d5f74d852c [0.032 seconds] #> ● completed branch Count_Presences_52d72a5ad405e933 [5.274 seconds] #> ● completed pattern Count_Presences #> ▶ dispatched target More_than_zero #> ● completed target More_than_zero [0.001 seconds] #> ▶ dispatched branch Presences_c112b37cd15959d6 #> ▶ dispatched branch Presences_af64bac105a08467 #> ● completed branch Presences_af64bac105a08467 [0.486 seconds] #> ▶ dispatched branch Presences_daf8d6353bc80f0c #> ● completed branch Presences_c112b37cd15959d6 [0.882 seconds] #> ▶ dispatched branch Presences_310adeccf6b44725 #> ● completed branch Presences_310adeccf6b44725 [0.429 seconds] #> ▶ dispatched branch Presences_e65f4227e8299cc4 #> ● completed branch Presences_daf8d6353bc80f0c [0.947 seconds] #> ▶ dispatched branch Presences_d4b9dc68293bd5b2 #> ● completed branch Presences_d4b9dc68293bd5b2 [0.575 seconds] #> ▶ dispatched branch Presences_88937156c1302a12 #> ● completed branch Presences_e65f4227e8299cc4 [0.73 seconds] #> ● completed branch Presences_88937156c1302a12 [0.335 seconds] #> ● completed pattern Presences #> ▶ ended pipeline [26.828 seconds]"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/index.html","id":"id_31-how-it-works","dir":"","previous_headings":"","what":"3.1 How It Works","title":"Creates Species Pools For Potential Habitats","text":"run_workflow function creates pipeline : 1- Reads data specified file path. 2- Filters data using provided filter expression. 3- Cleans species names match GBIF taxonomic backbone. 4- Counts species presences within specified geographic area (case, Aarhus). 5- Generates visual representation workflow (plot = TRUE). can monitor progress workflow visualize dependencies steps using targets::tar_visnetwork(). result similar running steps manually added benefits parallel execution reproducibility. automated approach allows streamline analysis ensures steps consistently applied data. also makes easier rerun workflow different parameters datasets.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean taxa using Taxize and rgbif — Clean_Taxa","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"function cleans vector taxa using Taxize rgbif","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"","code":"Clean_Taxa(Taxons, WriteFile = F, Species_Only = T)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"Taxons Vector taxa cleaned. WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results) Species_Only logical, TRUE (default) species returned, FALSE, return highest possible taxonomic resolution","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"data frame cleaned taxa scores.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"Chamberlain, Scott T., et al. \"Taxize: R package taxonomic lookup manipulation.\" Methods Ecology Evolution 6.12 (2015): 1451-1456. Chamberlain S, Barve V, Mcglinn D, Oldoni D, Desmet P, Geffert L, Ram K (2023). rgbif: Interface Global Biodiversity Information Facility API_ R package version 3.7.4","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean taxa using Taxize and rgbif — Clean_Taxa","text":"","code":"Cleaned <- Clean_Taxa(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` #> Joining with `by = join_by(matched_name2)`"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean taxa using Taxize — Clean_Taxa_Taxize","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"function cleans vector taxa using Taxize.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"","code":"Clean_Taxa_Taxize(Taxons, WriteFile = F)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"Taxons Vector taxa cleaned. WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results)","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"data frame cleaned taxa scores.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"Chamberlain, Scott T., et al. \"Taxize: R package taxonomic lookup manipulation.\" Methods Ecology Evolution 6.12 (2015): 1451-1456.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_Taxize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean taxa using Taxize — Clean_Taxa_Taxize","text":"","code":"Clean_Taxa_Taxize(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` #> # A tibble: 1 × 4 #>   Taxa        score matched_name2 TaxaID #>   <chr>       <dbl> <chr>          <int> #> 1 Canis lupus 0.988 Canis lupus        1"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Taxa from GBIF — Clean_Taxa_rgbif","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Clean taxonomic list using GBIF","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"","code":"Clean_Taxa_rgbif(Cleaned_Taxize, WriteFile = F, Species_Only = T)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Cleaned_Taxize data frame containing cleaned taxonomic list function Clean_Taxa_Taxize WriteFile logical False (default) returns data frame, TRUE generate folder (Results Working directory csv results) Species_Only logical, TRUE (default) species returned, FALSE, return highest possible taxonomic resolution","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"csv file containing cleaned taxonomic list","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"Chamberlain S, Barve V, Mcglinn D, Oldoni D, Desmet P, Geffert L, Ram K (2023). rgbif: Interface Global Biodiversity Information Facility API_ R package version 3.7.4,","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Clean_Taxa_rgbif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Taxa from GBIF — Clean_Taxa_rgbif","text":"","code":"Cleaned_Taxize <- Clean_Taxa_Taxize(Taxons = c(\"Canis lupus\", \"C. lupus\")) #> Joining with `by = join_by(Taxa)` Clean_Taxa_rgbif(Cleaned_Taxize) #> Joining with `by = join_by(matched_name2)` #> # A tibble: 1 × 12 #> # Groups:   species [1] #>   Taxa  matched_name2 confidence canonicalName kingdom phylum class order family #>   <chr> <chr>              <int> <chr>         <chr>   <chr>  <chr> <chr> <chr>  #> 1 Cani… Canis lupus           99 Canis lupus   Animal… Chord… Mamm… Carn… Canid… #> # ℹ 3 more variables: genus <chr>, species <chr>, rank <chr>"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Landuse Presences — GetLandusePresences","title":"Get Landuse Presences — GetLandusePresences","text":"function reads combines species presence data multiple files within specified folder given land use type.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Landuse Presences — GetLandusePresences","text":"","code":"GetLandusePresences(folder, Landuse)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Landuse Presences — GetLandusePresences","text":"folder character string specifying path folder containing land use data files. Landuse character string specifying land use type presence data read. function assumes files located subdirectories named land use type within specified folder.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Landuse Presences — GetLandusePresences","text":"data frame containing combined species presence data columns cell, species, Landuse.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetLandusePresences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Landuse Presences — GetLandusePresences","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   folder <- system.file(\"ex/\", package=\"SpeciesPoolR\")   list.files(folder, pattern = \".zip\")   Landuse <- \"ForestDryPoor\"   presences <- GetLandusePresences(folder, Landuse)   head(presences) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get occurrence data — GetOccs","title":"Get occurrence data — GetOccs","text":"function uses rgbif package get occurrence data Global Biodiversity Information Facility (GBIF) API.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get occurrence data — GetOccs","text":"","code":"GetOccs(   Species,   WriteFile = FALSE,   continent = NULL,   country = NULL,   shapefile = NULL,   limit = 10000,   Log = FALSE,   ... )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get occurrence data — GetOccs","text":"Species vector containing species query. WriteFile Logical. TRUE, occurrence data written Occs folder. FALSE, occurrence data returned list. continent contintent occurrences downloaded country two-letter country code (e.g., \"DK\" Denmark) define area interest. shapefile shapefile (lat/long coordinates) defining area interest. function create minimum bounding rectangle around shapefile query species occurrences. Default NULL. limit maximum number occurrences downloaded Log Logical. TRUE, log file created information progress function. ... Additional arguments passed occ_data function.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get occurrence data — GetOccs","text":"WriteFile = TRUE, function return anything. WriteFile = FALSE, list containing occurrence data species returned.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/GetOccs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get occurrence data — GetOccs","text":"","code":"# Get occurrence data for species in FinalSpeciesList # \\donttest{ Presences <- GetOccs(Species = c(\"Abies concolor\", \"Canis lupus\"), WriteFile = FALSE) #> Starting species 1 #> 1 of 2 ready! 2024-08-22 13:34:59.888804 #> Starting species 2 #> 2 of 2 ready! 2024-08-22 13:35:38.724682 # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Richness and Phylogenetic Diversity Data — Richness_PD","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"dataset containing species richness phylogenetic diversity results along associated land use information.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"","code":"Richness_PD"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"data.table data.frame 26,433 rows 4 variables: PD Numeric. Phylogenetic Diversity calculated picante R package. SR Integer. Species Richness calculated picante R package. cell Integer. cell index raster. Landuse Character. type land use associated cell (e.g., \"ForestDryPoor\").","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_PD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Richness and Phylogenetic Diversity Data — Richness_PD","text":"","code":"if (FALSE) { # \\dontrun{   data(Richness_PD)   head(Richness_PD) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Richness and Rarity Data — Richness_Rar","title":"Species Richness and Rarity Data — Richness_Rar","text":"dataset containing species richness results along associated Index Relative Rarity (Irr) land use information.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Richness and Rarity Data — Richness_Rar","text":"","code":"Richness_Rar"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species Richness and Rarity Data — Richness_Rar","text":"data.table data.frame 26,433 rows 4 variables: cell Numeric. cell index raster. Irr Numeric. Index Relative Rarity calculated rarity R package. Richness Integer. species richness value cell. Landuse Character. type land use associated cell (e.g., \"ForestDryPoor\").","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/Richness_Rar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Richness and Rarity Data — Richness_Rar","text":"","code":"if (FALSE) { # \\dontrun{   data(Richness_Rar)   head(Richness_Rar) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Phylogenetic Diversity — calc_pd","title":"Calculate Phylogenetic Diversity — calc_pd","text":"function calculates phylogenetic diversity (PD) given dataset phylogenetic tree.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Phylogenetic Diversity — calc_pd","text":"","code":"calc_pd(Fin, Tree)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Phylogenetic Diversity — calc_pd","text":"Fin data frame data table containing species presence data. data include columns species, cell, Landuse. Tree phylogenetic tree object, typically generated V.PhyloMaker::phylo.maker function. tree must contain component named scenario.3 tip labels.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Phylogenetic Diversity — calc_pd","text":"data table containing calculated phylogenetic diversity (PD) cell, along associated cell Landuse.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/calc_pd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Phylogenetic Diversity — calc_pd","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   Fin <- data.table(     cell = c(1, 1, 2, 2),     species = c(\"species_a\", \"species_b\", \"species_a\", \"species_c\"),     Landuse = c(\"forest\", \"forest\", \"grassland\", \"grassland\")   )    # Assume this generates a valid tree object   Tree <- V.PhyloMaker::phylo.maker(...)    # Calculate phylogenetic diversity   pd_results <- calc_pd(Fin, Tree)   print(pd_results) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Presences of Species within a Specified Area — count_presences","title":"Count Presences of Species within a Specified Area — count_presences","text":"function counts number occurrences specified species within defined area. area can specified using shapefile two-letter country code. function uses rgbif package query species occurrences returns data.frame results.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Presences of Species within a Specified Area — count_presences","text":"","code":"count_presences(species, shapefile = NULL, country = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Presences of Species within a Specified Area — count_presences","text":"species data.frame containing columns family, genus, species. taxonomic details species want count occurrences. shapefile shapefile (lat/long coordinates) defining area interest. function create minimum bounding rectangle around shapefile query species occurrences. Default NULL. country two-letter country code (e.g., \"DK\" Denmark) define area interest. Default NULL.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Presences of Species within a Specified Area — count_presences","text":"data.frame columns family, genus, species, N N represents number occurrences species within defined area.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/count_presences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Presences of Species within a Specified Area — count_presences","text":"","code":"# Example species data.frame species <- structure(list(family = \"Polytrichaceae\", genus = \"Atrichum\",                           species = \"Atrichum undulatum\"), row.names = c(NA, -1L),                      class = c(\"tbl_df\", \"tbl\", \"data.frame\"))  # Example 1: Using a country code df_country <- count_presences(species, country = \"DK\") print(df_country) #>            family    genus            species     N #>            <char>   <char>             <char> <num> #> 1: Polytrichaceae Atrichum Atrichum undulatum  1594  # Example 2: Using a shapefile # Assuming \"Aarhus.shp\" is in the working directory f <- system.file(\"ex/Aarhus.shp\", package=\"SpeciesPoolR\") df_shapefile <- count_presences(species, shapefile = f) print(df_shapefile) #>            family    genus            species     N #>            <char>   <char>             <char> <num> #> 1: Polytrichaceae Atrichum Atrichum undulatum    76"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"function takes data.table species richness results path raster template. generates SpatRaster object using terra package, populates species richness values, writes result Cloud-Optimized GeoTIFF.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"","code":"export_richness(Results, path, folder)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"Results data.table containing species richness results. data.table must contain least columns cell SR, cell refers cell index raster SR refers species richness value. path character string specifying file path raster template. raster used template output raster. folder folder store Cloud-Optimized GeoTIFF.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/export_richness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Species Richness to Cloud-Optimized GeoTIFF — export_richness","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   data(Richness_PD)   template_path <- system.file(\"ex/LU.tif\", package=\"SpeciesPoolR\")   output_folder <- \"Results/Richness\"   output_path <- export_richness(Richness_PD, template_path, output_folder) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Phylogenetic Tree — generate_tree","title":"Generate Phylogenetic Tree — generate_tree","text":"function takes CSV file path, reads data, generates phylogenetic tree using V.PhyloMaker package.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Phylogenetic Tree — generate_tree","text":"","code":"generate_tree(DF)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Phylogenetic Tree — generate_tree","text":"DF character string specifying file path CSV file. CSV file must contain columns named species, genus, family.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Phylogenetic Tree — generate_tree","text":"phylogenetic tree object generated V.PhyloMaker::phylo.maker function.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/generate_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Phylogenetic Tree — generate_tree","text":"","code":"if (FALSE) { # \\dontrun{   # Example usage:   p <- system.file(\"ex/Clean_Species.csv\", package=\"SpeciesPoolR\")   tree <- generate_tree(p)  } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in Data from a CSV or XLSX File — get_data","title":"Read in Data from a CSV or XLSX File — get_data","text":"function reads data CSV XLSX file. file must contain \"Species\" column. can optionally apply filter expression dataset returning . function returns data.frame filtered results processing pipeline.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in Data from a CSV or XLSX File — get_data","text":"","code":"get_data(file, filter = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in Data from a CSV or XLSX File — get_data","text":"file string specifying path CSV XLSX file read. file must contain \"Species\" column. filter optional expression used filter resulting data.frame. expression written using dplyr::filter(). default NULL, meaning filtering applied.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in Data from a CSV or XLSX File — get_data","text":"data.frame containing data read file, optionally filtered.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in Data from a CSV or XLSX File — get_data","text":"","code":"if (FALSE) { # \\dontrun{ # Read in data without filtering f <- system.file(\"ex/Species_List.csv\", package=\"SpeciesPoolR\") data <- get_data(f)  # Read in data and filter for Plantae kingdom and certain taxon ranges filtered_data <- get_data(   file = f,   filter = quote(    Kingdom == \"Plantae\" &    Class == \"Magnoliopsida\"   ) ) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Occurrence Data for a Given Species List — get_presences","title":"Get Occurrence Data for a Given Species List — get_presences","text":"function retrieves occurrence data given list species using GetOccs function. function designed fetch data species Denmark (country = \"DK\") 1999 2023 return cleaned data frame selected columns.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Occurrence Data for a Given Species List — get_presences","text":"","code":"get_presences(species, country = NULL, shapefile = NULL)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Occurrence Data for a Given Species List — get_presences","text":"species vector species use. country two-letter country code (e.g., \"DK\" Denmark) define area interest. shapefile shapefile (lat/long coordinates) defining area interest. function create minimum bounding rectangle around shapefile query species occurrences. Default NULL.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Occurrence Data for a Given Species List — get_presences","text":"data.frame containing occurrence data specified species, including columns: scientificName, decimalLatitude, decimalLongitude, family, genus, species.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/get_presences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Occurrence Data for a Given Species List — get_presences","text":"","code":"if (FALSE) { # \\dontrun{ # Assume `species_list` is a data.frame with a column named `species` presences <- get_presences(species_list) } # }"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the SpeciesPoolR Workflow — run_workflow","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"function sets runs targets workflow using functions provided SpeciesPoolR package. workflow includes steps cleaning species data, counting species presences, filtering data, generating buffers spatial analysis.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"","code":"run_workflow(   workers = 2,   error = \"null\",   file_path,   filter = NULL,   country = NULL,   shapefile = NULL,   plot = TRUE )"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"workers Number parallel workers use crew controller. Default 2. error Handling errors outdated targets. Default \"null\". file_path Path Excel csv file containing data. filter optional expression used filter resulting data.frame. expression written using dplyr::filter(). default NULL, meaning filtering applied. country two-letter country code define area interest counting species presences. Default NULL. shapefile Path shapefile defining area interest counting species presences. Default NULL. plot TRUE (default) run targets::tar_visnetwork() plot workflow","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/run_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the SpeciesPoolR Workflow — run_workflow","text":"Executes targets pipeline.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Cloud Optimized Geotiff (COG) — write_cog","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"function takes SpatRaster object saves Cloud Optimized Geotiff (COG). COGs geospatial files optimized efficient cloud storage retrieval.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"","code":"write_cog(SpatRaster, Name)"},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"SpatRaster SpatRaster object (class SpatRaster) representing raster data saved COG. Name desired name COG file, including \".tif\" extension.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"Cloud Optimized Geotiff saved specified location.","code":""},{"path":"https://derek-corcoran-barrios.github.io/SpeciesPoolR/reference/write_cog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Cloud Optimized Geotiff (COG) — write_cog","text":"","code":"# Load required libraries if not already loaded # library(terra)  # Create a sample SpatRaster r <- terra::rast(nrows = 5, ncols = 5, vals = 1:25)  # Save the SpatRaster as a COG write_cog(SpatRaster = r, Name = \"test.tif\")  # Clean up later file.remove(\"test.tif\") #> [1] TRUE file.remove(\"test.tfw\") #> [1] TRUE"}]
